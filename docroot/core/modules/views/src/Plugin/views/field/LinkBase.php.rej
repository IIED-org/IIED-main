***************
*** 3,11 ****
  namespace Drupal\views\Plugin\views\field;
  
  use Drupal\Core\Access\AccessManagerInterface;
  use Drupal\Core\Form\FormStateInterface;
  use Drupal\Core\Render\BubbleableMetadata;
  use Drupal\Core\Routing\RedirectDestinationTrait;
  use Drupal\views\ResultRow;
  use Symfony\Component\DependencyInjection\ContainerInterface;
  
--- 3,15 ----
  namespace Drupal\views\Plugin\views\field;
  
  use Drupal\Core\Access\AccessManagerInterface;
+ use Drupal\Core\Entity\EntityRepositoryInterface;
+ use Drupal\Core\Entity\EntityTypeManagerInterface;
  use Drupal\Core\Form\FormStateInterface;
+ use Drupal\Core\Language\LanguageManagerInterface;
  use Drupal\Core\Render\BubbleableMetadata;
  use Drupal\Core\Routing\RedirectDestinationTrait;
+ use Drupal\views\Entity\Render\EntityTranslationRenderTrait;
  use Drupal\views\ResultRow;
  use Symfony\Component\DependencyInjection\ContainerInterface;
  
***************
*** 17,22 ****
  abstract class LinkBase extends FieldPluginBase {
  
    use RedirectDestinationTrait;
  
    /**
     * The access manager service.
--- 21,27 ----
  abstract class LinkBase extends FieldPluginBase {
  
    use RedirectDestinationTrait;
+   use EntityTranslationRenderTrait;
  
    /**
     * The access manager service.
***************
*** 32,37 ****
     */
    protected $currentUser;
  
    /**
     * Constructs a LinkBase object.
     *
--- 37,63 ----
     */
    protected $currentUser;
  
+   /**
+    * The language manager.
+    *
+    * @var \Drupal\Core\Language\LanguageManagerInterface
+    */
+   protected $languageManager;
+ 
+   /**
+    * The entity type manager.
+    *
+    * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+    */
+   protected $entityTypeManager;
+ 
+   /**
+    * The entity repository.
+    *
+    * @var \Drupal\Core\Entity\EntityRepositoryInterface
+    */
+   protected $entityRepository;
+ 
    /**
     * Constructs a LinkBase object.
     *
***************
*** 43,52 ****
     *   The plugin implementation definition.
     * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
     *   The access manager.
     */
-   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccessManagerInterface $access_manager) {
      parent::__construct($configuration, $plugin_id, $plugin_definition);
      $this->accessManager = $access_manager;
    }
  
    /**
--- 69,100 ----
     *   The plugin implementation definition.
     * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
     *   The access manager.
+    * @param \Drupal\Core\Entity\EntityTypeManagerInterface|null $entity_type_manager
+    *   The entity type manager.
+    * @param \Drupal\Core\Entity\EntityRepositoryInterface|null $entity_repository
+    *   The entity repository.
+    * @param \Drupal\Core\Language\LanguageManagerInterface|null $language_manager
+    *   The language manager.
     */
+   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccessManagerInterface $access_manager, EntityTypeManagerInterface $entity_type_manager = NULL, EntityRepositoryInterface $entity_repository = NULL, LanguageManagerInterface $language_manager = NULL) {
      parent::__construct($configuration, $plugin_id, $plugin_definition);
      $this->accessManager = $access_manager;
+     if (!$entity_type_manager) {
+       @trigger_error('Passing the entity type manager service to \Drupal\views\Plugin\views\field\LinkBase::__construct is required since 8.7.0, see https://www.drupal.org/node/3023427.', E_USER_DEPRECATED);
+       $entity_type_manager = \Drupal::service('entity_type.manager');
+     }
+     $this->entityTypeManager = $entity_type_manager;
+     if (!$entity_repository) {
+       @trigger_error('Passing the entity repository service to \Drupal\views\Plugin\views\field\LinkBase::__construct is required since 8.7.0, see https://www.drupal.org/node/3023427.', E_USER_DEPRECATED);
+       $entity_repository = \Drupal::service('entity.repository');
+     }
+     $this->entityRepository = $entity_repository;
+ 
+     if (!$language_manager) {
+       @trigger_error('Passing the language manager service to \Drupal\views\Plugin\views\field\LinkBase::__construct is required since 8.7.0, see https://www.drupal.org/node/3023427.', E_USER_DEPRECATED);
+       $language_manager = \Drupal::service('language_manager');
+     }
+     $this->languageManager = $language_manager;
    }
  
    /**
***************
*** 57,63 ****
        $configuration,
        $plugin_id,
        $plugin_definition,
-       $container->get('access_manager')
      );
    }
  
--- 105,114 ----
        $configuration,
        $plugin_id,
        $plugin_definition,
+       $container->get('access_manager'),
+       $container->get('entity_type.manager'),
+       $container->get('entity.repository'),
+       $container->get('language_manager')
      );
    }
  
***************
*** 115,120 ****
     * {@inheritdoc}
     */
    public function query() {
      $this->addAdditionalFields();
    }
  
--- 166,174 ----
     * {@inheritdoc}
     */
    public function query() {
+     if ($this->languageManager->isMultilingual()) {
+       $this->getEntityTranslationRenderer()->query($this->query, $this->relationship);
+     }
      $this->addAdditionalFields();
    }
  
***************
*** 178,186 ****
     */
    protected function addLangcode(ResultRow $row) {
      $entity = $this->getEntity($row);
-     $langcode_key = $entity ? $entity->getEntityType()->getKey('langcode') : FALSE;
-     if ($langcode_key && isset($this->aliases[$langcode_key])) {
-       $this->options['alter']['language'] = $entity->language();
      }
    }
  
--- 232,239 ----
     */
    protected function addLangcode(ResultRow $row) {
      $entity = $this->getEntity($row);
+     if ($this->languageManager->isMultilingual()) {
+       $this->options['alter']['language'] = $this->getEntityTranslation($entity, $row)->language();
      }
    }
  
***************
*** 194,197 ****
      return $this->t('link');
    }
  
  }
--- 247,285 ----
      return $this->t('link');
    }
  
+   /**
+    * {@inheritdoc}
+    */
+   protected function getEntityTypeId() {
+     return $this->getEntityType();
+   }
+ 
+   /**
+    * {@inheritdoc}
+    */
+   protected function getEntityTypeManager() {
+     return $this->entityTypeManager;
+   }
+ 
+   /**
+    * {@inheritdoc}
+    */
+   protected function getEntityRepository() {
+     return $this->entityRepository;
+   }
+ 
+   /**
+    * {@inheritdoc}
+    */
+   protected function getLanguageManager() {
+     return $this->languageManager;
+   }
+ 
+   /**
+    * {@inheritdoc}
+    */
+   protected function getView() {
+     return $this->view;
+   }
+ 
  }
