<?php

/**
 * @file
 * Autogenerates PDF preview into an image field.
 */

use Drupal\file\Entity\File;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Spatie\PdfToImage\Pdf;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\FieldConfigInterface;
use \Drupal\file\FileInterface;

/**
 * Implements hook_entity_presave().
 */
function pdf_preview_image_entity_presave(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface) {
    foreach ($entity->getFieldDefinitions() as $field_definition) {
      if ($field_definition->getType() == 'file' && $field_definition->getThirdPartySetting('pdf_to_image_preview', 'enable')) {
        $target_field = $entity->getFieldDefinition($field_definition->getThirdPartySetting('pdf_to_image_preview', 'target_field'));
        if (isset($target_field)) {
          $target_field_settings = $target_field->getItemDefinition()->getSettings();
          $file_pdf = $entity->get($field_definition->getName())->getValue();
          if ($file_pdf) {
            $file_target_id = $file_pdf[0]['target_id'];

            // Load pdf file.
            $file = \Drupal::entityTypeManager()->getStorage($field_definition->getFieldStorageDefinition()->getSetting('target_type'))->load($file_target_id);
            $pdf_file_path = $file->get('uri')->getValue();
            $pdf_filename = $file->getFilename();

            // Set image preview file name, path and uid.
            $img_preview_filename = str_replace('.pdf', '', $pdf_filename) . '.jpg';
            $token_service = \Drupal::token();
            $directory = $token_service->replace($target_field_settings['file_directory']);
            $img_preview_path = $target_field_settings['uri_scheme'] . '://' . $directory . '/' . $img_preview_filename;
            $img_preview_uid = $file->get('uid')->getValue();

            // Create image preview file.
            $file_img_preview = File::create([
              'uid' => $img_preview_uid[0]['target_id'],
              'filename' => $img_preview_filename,
              'uri' => $img_preview_path,
              'status' => 1,
            ]);

            $file_img_preview->save();
            $entity->set($target_field->getName(), $file_img_preview);
            // Create and save img preview file from pdf.
            if (class_exists('Spatie\PdfToImage\Pdf')) {
              $pdf = new Pdf($pdf_file_path[0]['value']);
              $pdf->saveImage($img_preview_path);
            }
            else {
              \Drupal::logger('pdf_preview_image')->error(t('Class Pdf not found. Package spatie/pdf-to-image is missing.'));
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pdf_preview_image_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  $field_config = $form_state->getBuildInfo()['callback_object']->getEntity();

  if (pdf_to_image_preview_is_eligible($field_config)) {
    // Since this file field accepts PDFs, we can hook in with our stuff.
    $form['third_party_settings']['pdf_to_image_preview'] = array(
      '#type' => 'fieldset',
      '#title' => t('PDF preview autogeneration'),
    );

    $form['third_party_settings']['pdf_to_image_preview']['enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Generate first page preview'),
      '#description' => t('Automatically generate 1st page PDF preview and save it into an arbitrary image field on the same entity.'),
      '#default_value' => $field_config->getThirdPartySetting('pdf_to_image_preview', 'enable'),
    );

    // The rest of our settings should be visible only if the feature is
    // actually enabled.
    $states = [
      'visible' => [
        ':input[name$="[pdf_to_image_preview][enable]"]' => ['checked' => TRUE],
      ],
    ];

    $form['third_party_settings']['pdf_to_image_preview']['target_field'] = array(
      '#type' => 'select',
      '#title' => t('Store 1st page image preview in'),
      '#description' => t('Specify an image field where the 1st page preview of the PDF should be saved.'),
      '#options' => pdf_to_image_preview_allowed_image_fields($field_config->getTargetEntityTypeId(), $field_config->getTargetBundle()),
      '#states' => $states,
      '#default_value' => $field_config->getThirdPartySetting('pdf_to_image_preview', 'target_field'),
    );
  }
}

/**
 * Determine whether the field config is eligible for PDF to image manipulation.
 *
 * @param \Drupal\Core\Field\FieldConfigInterface $field_config
 *   Field config entity object whose eligibility to determine.
 *
 * @return bool
 *   Whether the provided field config entity is eligible for PDF to image
 *   manipulation
 */
function pdf_to_image_preview_is_eligible(FieldConfigInterface $field_config) {
  return $field_config->getType() == 'file' && preg_match('/(^|\s|,)pdf($|\s|,)/i', $field_config->getSetting('file_extensions'));
}

/**
 * Fetch a list of image fields where the preview could be saved.
 *
 * @param string $entity_type
 *   Entity type where to conduct the search of allowed image fields.
 * @param string $bundle
 *   Bundle where to conduct the search of allowed image fields.
 *
 * @return array
 *   Array of possible field names where PDF preview could be saved. Keys are
 *   field names whereas values are their human labels
 */
function pdf_to_image_preview_allowed_image_fields($entity_type, $bundle) {
  $allowed_values = [];

  foreach (\Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $bundle) as $field_definition) {
    if ($field_definition->getType() == 'image') {
      $allowed_values[$field_definition->getName()] = $field_definition->getLabel();
    }
  }

  return $allowed_values;
}
