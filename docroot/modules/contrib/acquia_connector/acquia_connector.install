<?php

/**
 * @file
 * Install, update, and uninstall functions for the Acquia Connector module.
 */

use Drupal\acquia_connector\SiteProfile\TestStatusController;
use Drupal\Core\Url;

/**
 * Implements hook_uninstall().
 */
function acquia_connector_uninstall() {
  $subscription = \Drupal::service('acquia_connector.subscription');
  $settings = $subscription->getSettings();
  $settings->deleteAllData();
}

/**
 * Implements hook_requirements().
 */
function acquia_connector_requirements($phase) {
  $requirements = [];
  if ($phase !== 'runtime') {
    return $requirements;
  }
  $subscription = \Drupal::service('acquia_connector.subscription');

  $has_credentials = $subscription->hasCredentials();

  // Inform users on subscription status. Either we know they are active,
  // or we know they have credentials but not active (not set up yet) or
  // we have credentials but an inactive subscription (either bad
  // credentials or expired subscription).
  if ($subscription->isActive()) {
    $requirements['acquia_subscription_status'] = [
      'title' => t('Acquia Subscription status'),
      'severity' => REQUIREMENT_OK,
      'value' => t('Active'),
      'description' => t('You can <a href=":refresh-status">manually refresh the subscription status</a>.', [
        ':refresh-status' => Url::fromRoute('acquia_connector.refresh_status', [], ['absolute' => TRUE])
          ->toString(),
      ]),
    ];
  }
  elseif (!$has_credentials) {
    $requirements['acquia_subscription_status'] = [
      'title' => t('Acquia Subscription status'),
      'severity' => REQUIREMENT_WARNING,
      'value' => t('Unknown'),
      'description' => t('You did not complete your signup to Acquia. You can provide the subscription identifier and the subscription key at the <a href=":settings">Acquia settings</a> page or try to <a href=":refresh-status">manually refresh the subscription status</a>.', [
        ':settings' => Url::fromRoute('acquia_connector.settings')
          ->toString(),
        ':refresh-status' => Url::fromRoute('acquia_connector.refresh_status')
          ->toString(),
      ]),
    ];
  }
  else {
    // Should get cached data if it exists.
    $subscription = $subscription->getSubscription();
    $href = isset($subscription['uuid']) ? 'https://loud.acquia.com/app/develop/applications/' . $subscription['uuid'] : 'https://cloud.acquia.com';
    $requirements['acquia_subscription_status'] = [
      'title' => t('Acquia Subscription status'),
      'severity' => REQUIREMENT_WARNING,
      'value' => t('Inactive'),
      'description' => t('Your subscription is expired or you are using an invalid identifier and key pair. You can check the subscription identifier and the subscription key at the <a href=":settings">Acquia settings</a> page. Check <a href=":acquia-network">your subscription on the Acquia Subscription</a> for further status information.', [
        ':settings' => Url::fromRoute('acquia_connector.settings')
          ->toString(),
        ':acquia-network' => $href,
      ]),
    ];
  }

  // Acquia SPI custom tests status.
  $variables = [
    ':help' => Url::fromUri('base:admin/help/acquia_connector', ['absolute' => TRUE])
      ->toString(),
    ':validate' => Url::fromRoute('acquia_connector.test_validate', [], ['absolute' => TRUE])
      ->toString(),
  ];

  // Compatibility for Drupal 9.2.
  if (method_exists(\Drupal::moduleHandler(), 'invokeAllWith')) {
    $modules = [];
    \Drupal::moduleHandler()->invokeAllWith('acquia_connector_spi_test', function (callable $hook, string $module) use (&$modules) {
      // There is minimal overhead since the hook is not invoked.
      $modules[] = $module;
    });
  }
  else {
    //@phpstan-ignore-next-line
    $modules = \Drupal::moduleHandler()->getImplementations('acquia_connector_spi_test');
  }

  if (empty($modules)) {
    $description = t('No custom tests were detected in any module.');
    $value = t('Not implemented (<a href=":help">more information</a>)', $variables);
    $severity = REQUIREMENT_OK;
  }
  else {
    $status = new TestStatusController();
    $result = $status->testStatus();

    if (!empty($result)) {
      $variables['%modules'] = implode(', ', array_keys($result));
      $description = t('Custom tests within the following module(s) have failed validation and will not be sent: %modules. <br/>Please check the error logs for more information regarding how to pass validation or <a href=":validate">perform another validation check</a>. A validation check can also be performed via the Drush command, "spi-test-validate".', $variables);
      $value = t('Failed (<a href=":help">more information</a>)', $variables);
      $severity = REQUIREMENT_ERROR;
    }
    else {
      $variables['%modules'] = implode(', ', $modules);
      $description = t('Custom test data is structured properly and is sending from: %modules', $variables);
      $value = t('Passed');
      $severity = REQUIREMENT_OK;
    }

  }

  $requirements['acquia_spi_test'] = [
    'title' => t('Acquia Subscription SPI Custom Tests'),
    'description' => $description,
    'value' => $value,
    'severity' => $severity,
  ];

  return $requirements;
}
