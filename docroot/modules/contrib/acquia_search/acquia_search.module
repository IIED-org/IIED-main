<?php

/**
 * @file
 * Integration between Drupal and Acquia's hosted Solr search service.
 */

use Drupal\acquia_search\Helper\Messages;
use Drupal\acquia_search\Helper\Runtime;
use Drupal\acquia_search\Plugin\SolrConnector\SearchApiSolrAcquiaConnector;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormState;
use Drupal\Core\Form\FormStateInterface;
use Drupal\search_api\Entity\Index;
use Drupal\search_api\Entity\Server;
use Drupal\search_api\Form\IndexProcessorsForm;
use Drupal\search_api\IndexInterface;
use Drupal\search_api\Query\QueryInterface;
use Drupal\search_api\SearchApiException;
use Drupal\search_api\ServerInterface;
use Laminas\Stdlib\ArrayUtils;
use Solarium\Core\Query\QueryInterface as SolariumQueryInterface;

/**
 * Implements hook_entity_operation_alter().
 *
 * Don't allow delete default server and index.
 */
function acquia_search_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if (empty($operations['delete'])) {
    return;
  }

  $do_not_delete = [
    'acquia_search_server',
    'acquia_search_index',
  ];

  if (in_array($entity->id(), $do_not_delete, TRUE)) {
    unset($operations['delete']);
  }

}

/**
 * Implements hook_search_api_server_load().
 *
 * Flag when a certain server should be enforcing read-only mode.
 */
function acquia_search_search_api_server_load(array $entities) {
  /** @var \Drupal\search_api\Entity\Server[] $entities */
  $acquia_servers = array_filter($entities, function ($server) {
    return Runtime::isAcquiaServer($server);
  });

  /** @var \Drupal\acquia_search\PreferredCoreService $preferred_core_service */
  $preferred_core_service = \Drupal::service('acquia_search.preferred_core');

  foreach ($acquia_servers as $server) {
    /** @var \Drupal\search_api\Entity\Server $server */
    $backend_config = $server->getBackendConfig();

    $preferredCore = $preferred_core_service->getPreferredCore();
    if (empty($preferredCore) && $server->status()) {
      $server->disable();
      continue;
    }

    if (\Drupal::state()->get('acquia_search.connect_index')) {
      acquia_search_connect_index($server);
    }

    if ($preferred_core_service->isReadOnly()) {
      $backend_config['overridden_by_acquia_search'] = SearchApiSolrAcquiaConnector::READ_ONLY;
    }

    $server->setBackendConfig($backend_config);
  }
}

/**
 * Connects the default index to the default server.
 *
 * @param \Drupal\search_api\ServerInterface $server
 *   The server.
 */
function acquia_search_connect_index(ServerInterface $server) {
  \Drupal::state()->set('acquia_search.connect_index', FALSE);
  if ($index = Index::load('acquia_search_index')) {
    $server->addIndex($index);
    $index->setServer($server);
    $index->enable();
    $index->save();

  }
}

/**
 * Disconnects an index from its server.
 *
 * @param \Drupal\search_api\IndexInterface $index
 *   The index.
 */
function acquia_search_disconnect_index(IndexInterface $index) {
  $index->setServer();
  $index->disable();
  $index->save();
}

/**
 * Implements hook_search_api_index_load().
 *
 * This takes care of marking indexes as read-only mode under the right
 * conditions (@see acquia_search_search_api_server_load()).
 */
function acquia_search_search_api_index_load($entities) {
  // Prevent recursion by stopping execution if this variable already got set.
  static $indicies;
  if ($indicies) {
    return;
  }
  $indicies = $entities;

  // Loop through the Index entities.
  /** @var \Drupal\search_api\Entity\Index $index */

  /** @var \Drupal\acquia_search\PreferredCoreService $preferred_core_service */
  $preferred_core_service = \Drupal::service('acquia_search.preferred_core');

  foreach ($entities as $index) {
    // Check for server-less indexes.
    // An infinite loop will occur if this tries to load a server.
    // @see https://www.drupal.org/project/acquia_connector/issues/2956737
    $server = $index->getServerInstance();
    if (!$server instanceof ServerInterface) {
      continue;
    }

    if (!$server->status()) {
      continue;
    }

    if (!Runtime::isAcquiaServer($server)) {
      continue;
    }

    // Reset the overridden_by_acquia_search option.
    $options = $index->getOptions();

    if (!empty($options['overridden_by_acquia_search'])) {
      unset($options['overridden_by_acquia_search']);
      $index->setOptions($options);
    }

    if ($preferred_core_service->isReadOnly()) {
      // Set this index to read-only mode.
      $index->set('read_only', TRUE);
      // Flag this index as having been altered by this module.
      $index->setOption('overridden_by_acquia_search', SearchApiSolrAcquiaConnector::READ_ONLY);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the Search API server's status form and displays a warning.
 */
function acquia_search_form_search_api_server_status_alter(&$form) {

  if (empty($form['#server'])) {
    return;
  }
  $server = $form['#server'];

  if (!is_object($server) || get_class($server) !== Server::class) {
    return;
  }

  $config = $server->getBackendConfig();

  /** @var \Drupal\search_api\Entity\Server $server */
  if ($config['connector'] !== 'solr_acquia_connector') {
    return;
  }

  if (isset($config['overridden_by_acquia_search']) && $config['overridden_by_acquia_search'] == SearchApiSolrAcquiaConnector::READ_ONLY) {
    // Show read-only warning and disable the "Delete all indexed data on this
    // server" action.
    Messages::showReadOnlyModeWarning();

    $form['actions']['clear']['#disabled'] = TRUE;
  }

  if (!\Drupal::service('acquia_search.preferred_core')->isPreferredCoreAvailable()) {
    // Show "could not find preferred core" message.
    Messages::showNoPreferredCoreError();
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Display the read-only warning.
 */
function acquia_search_form_search_api_server_edit_form_alter(&$form) {

  $server = Server::load($form['id']['#default_value']);

  if (!$server) {
    return;
  }

  if (!Runtime::isAcquiaServer($server)) {
    return;
  }

  if (Runtime::shouldEnforceReadOnlyMode()) {
    Messages::showReadOnlyModeWarning();
  }

  if (!\Drupal::service('acquia_search.preferred_core')->isPreferredCoreAvailable()) {
    // Show "could not find preferred core" message.
    Messages::showNoPreferredCoreError();
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Shows message if we are editing a Search API server's configuration.
 */
function acquia_search_form_search_api_index_edit_form_alter(&$form, FormState $form_state) {

  /** @var \Drupal\search_api\Entity\Server $server */
  $server = Server::load($form['server']['#default_value']);

  if (!$server) {
    return;
  }

  if (!Runtime::isAcquiaServer($server)) {
    return;
  }

  if (Runtime::shouldEnforceReadOnlyMode()) {
    Messages::showReadOnlyModeWarning();
    $form['options']['read_only']['#disabled'] = TRUE;
  }

  if (!\Drupal::service('acquia_search.preferred_core')->isPreferredCoreAvailable()) {
    // Show "could not find preferred core" message.
    Messages::showNoPreferredCoreError();
  }

  $settings = [];
  $default_settings = ['use_edismax' => FALSE];
  /** @var \Drupal\search_api\IndexInterface $search_index */
  $search_index = $form_state->getFormObject()->getEntity();
  if (!$search_index->isNew()) {
    $settings = $search_index->getThirdPartySettings('acquia_search');
  }
  $settings = ArrayUtils::merge($default_settings, $settings, TRUE);

  $form['third_party_settings']['acquia_search'] = [
    '#tree' => TRUE,
    '#type' => 'details',
    '#title' => t('Acquia Search Solr'),
    '#open' => TRUE,
  ];
  $form['third_party_settings']['acquia_search']['use_edismax'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable eDisMax'),
    '#description' => t('Using the eDisMax query parser prevents the <em>Type-specific boosting</em> from having any effect on queries. Read <a href="https://support-acquia.force.com/s/article/Should-I-enable-eDisMax-with-Acquia-Search">Should I enable eDisMax with Acquia Search?</a> to learn more.'),
    '#default_value' => $settings['use_edismax'],
  ];
}

/**
 * Implements hook_form_search_api_index_processors_alter().
 */
function acquia_search_form_search_api_index_processors_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof IndexProcessorsForm) {
    return;
  }
  $index = $form_object->getEntity();
  if (!$index instanceof IndexInterface) {
    return;
  }
  $use_edismax = $index->getThirdPartySetting(
    'acquia_search',
    'use_edismax',
    FALSE
  );
  if ($use_edismax && $index->isValidProcessor('type_boost')) {
    \Drupal::messenger()->addWarning(t('Using the eDisMax query parser prevents the <em>Type-specific boosting</em> from having any effect on queries.'));
  }
  if ($use_edismax && isset($form['status']['type_boost'])) {
    $form['status']['type_boost']['#disabled'] = TRUE;
    $form['status']['type_boost']['#description'] .= '<br /><strong>' . t('Using the eDisMax query parser prevents the <em>Type-specific boosting</em> from having any effect on queries.') . '</strong>';
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Helps us alter some Search API status pages.
 */
function acquia_search_theme_registry_alter(&$theme_registry) {
  $module_handler = \Drupal::moduleHandler();
  $module_path = $module_handler->getModule('acquia_search')->getPath();

  $theme_registry['search_api_index']['variables']['acquia_search_info_box'] = NULL;
  $theme_registry['search_api_index']['path'] = $module_path . '/templates';

  $theme_registry['search_api_server']['variables']['acquia_search_info_box'] = NULL;
  $theme_registry['search_api_server']['path'] = $module_path . '/templates';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Theme override for Search API index status page.
 *
 * @throws \Drupal\Component\Plugin\Exception\PluginException
 * @throws \Drupal\search_api\SearchApiException
 */
function acquia_search_preprocess_search_api_index(array &$variables) {
  /** @var \Drupal\search_api\Entity\Index $index */
  $index = $variables['index'];
  /** @var \Drupal\search_api\Entity\Server $server */
  $server = Server::load($index->get('server'));

  if (!$server || !Runtime::isAcquiaServer($server)) {
    return;
  }

  if (Runtime::shouldEnforceReadOnlyMode()) {
    Messages::showReadOnlyModeWarning();
  }

  if (!\Drupal::service('acquia_search.preferred_core')->isPreferredCoreAvailable()) {
    // Show "could not find preferred core" message.
    Messages::showNoPreferredCoreError();
  }

  $variables['acquia_search_info_box'] = [
    '#type' => 'fieldset',
    '#title' => t('Acquia Search status for this connection'),
    '#markup' => Messages::getSearchStatusMessage($server),
  ];
}

/**
 * Theme override function for Search API server status page.
 *
 * @param array $variables
 *   Variables.
 *
 * @throws \Drupal\Component\Plugin\Exception\PluginException
 * @throws \Drupal\search_api\SearchApiException
 */
function acquia_search_preprocess_search_api_server(array &$variables) {
  /** @var \Drupal\search_api\Entity\Server $server */
  $server = $variables['server'];

  if (!Runtime::isAcquiaServer($server)) {
    return;
  }

  if (Runtime::shouldEnforceReadOnlyMode()) {
    Messages::showReadOnlyModeWarning();
  }

  $variables['acquia_search_info_box'] = [
    '#type' => 'fieldset',
    '#title' => t('Acquia Search status for this connection'),
    '#markup' => Messages::getSearchStatusMessage($server),
  ];
}

/**
 * Implements hook_search_api_solr_query_alter().
 *
 * @todo Remove when support for Solr 4.2.1 is no longer supported.
 */
function acquia_search_search_api_solr_query_alter(SolariumQueryInterface $solarium_query, QueryInterface $query) {
  if (class_exists('Drupal\search_api_solr\Event\SearchApiSolrEvents')) {
    return;
  }

  $handler = $solarium_query->getHandler();
  $search_index = $query->getIndex();
  try {
    $server = $search_index->getServerInstance();
  }
  catch (SearchApiException $exception) {
    return;
  }

  if (empty($server)) {
    return;
  }

  $backend_config = $server->getBackendConfig();
  if (!(!empty($backend_config['connector']) && $backend_config['connector'] === 'solr_acquia_connector')) {
    return;
  }

  if ('select' === $handler) {
    $use_edismax = $search_index->getThirdPartySetting(
      'acquia_search',
      'use_edismax',
      FALSE
    );
    if ($use_edismax) {
      $solarium_query->addParam('defType', 'edismax');
    }
  }
}
