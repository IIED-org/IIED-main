---
type: default
team: dit
group: drupal-cloud
service: acquia_search

validate_config: true

environment_image:
  file: ".acquia/Dockerfile.ci"
  context: "."
  build_args:
    - secrets:
        - type: vault
          key: SSH_KEY
          value: GIT_SSH_KEY
          path: secret/pipeline-default/GIT_SSH_KEY
        - type: vault
          key: CLIENT_ID
          value: client_id
          path: secret/acquia_search/client_id
        - type: vault
          key: CLIENT_SECRET
          value: client_secret
          path: secret/acquia_search/client_secret
        - type: vault
          key: REFRESH_TOKEN
          value: refresh_token
          path: secret/acquia_search/refresh_token


_orca_steps: &orca_steps
  steps:
    - setup_ramfs:
        - cp -ar /acquia /ramfs  &&  df -hT
    - before_install:
        - cd /ramfs${CI_WORKSPACE}
        - |
          # If ORCA version is overridden then use that.
          if [ "$ORCA_VERSION" != "$ORCA_VERSION_OVERRIDE" ]; then
            # Remove ORCA if it is already installed and install appropriate version of
            # ORCA using the ORCA_VERSION_OVERRIDE environment variable. This allows
            # us to change the ORCA version at runtime.
            rm -rf ../orca
            composer create-project --no-dev --ignore-platform-req=php acquia/orca ../orca "$ORCA_VERSION_OVERRIDE"
          fi
          ../orca/bin/ci/before_install.sh
    - "PHP version selection":
      - |
        cd /ramfs${CI_WORKSPACE}
        # Override the default PHP version provided by the container to PHP 8.2.
        if [ "$JENKINS_PHP_VERSION" = 8.2 ]; then
          # Download php82
          apk update && apk add php82 php82-cli php82-common \
             php82-zip php82-gd php82-mbstring php82-tokenizer \
             php82-curl php82-bcmath php82-xml \
             php82-intl php82-sqlite3 php82-mysqli php82-dev \
             php82-gmp php82-soap php82-sockets \
             php82-phar php82-dom php82-xmlwriter php82-pdo php82-simplexml \
             php82-session php82-pdo_sqlite

          # Configure php
          ln -s -f /usr/bin/php82 /usr/bin/php
          ln -s -f /usr/bin/php /usr/local/bin/php

          # Configure phpize
          ln -s -f /usr/bin/phpize82 /usr/bin/phpize
          ln -s -f /usr/bin/phpize /usr/local/bin/phpize

          # Configure php-config
          ln -s -f /usr/bin/php-config82 /usr/bin/php-config
          ln -s -f /usr/bin/php-config /usr/local/bin/php-config
        fi
        # Override the default PHP version provided by the container to PHP 8.0.
        if [ "$JENKINS_PHP_VERSION" = 8.0 ]; then

        echo 'http://dl-cdn.alpinelinux.org/alpine/v3.15/community' >> /etc/apk/repositories
        echo 'http://dl-cdn.alpinelinux.org/alpine/v3.15/main' >> /etc/apk/repositories

          # Download php8.0
          apk update && apk add php8 php8-cli php8-common \
             php8-zip php8-gd php8-mbstring php8-tokenizer \
             php8-curl php8-bcmath php8-xml \
             php8-intl php8-sqlite3 php8-mysqli php8-dev \
             php8-gmp php8-soap php8-sockets \
             php8-phar php8-dom php8-xmlwriter php8-pdo php8-simplexml \
             php8-session php8-pdo_sqlite
          # Configure php
          ln -s -f /usr/bin/php8 /usr/bin/php
          ln -s -f /usr/bin/php /usr/local/bin/php

          # Configure phpize
          ln -s -f /usr/bin/phpize8 /usr/bin/phpize
          ln -s -f /usr/bin/phpize /usr/local/bin/phpize

          # Configure php-config
          ln -s -f /usr/bin/php-config8 /usr/bin/php-config
          ln -s -f /usr/bin/php-config /usr/local/bin/php-config
        fi
        # Override the default PHP version provided by the container to PHP 7.4.
        if [ "$JENKINS_PHP_VERSION" = 7.4 ]; then
          composer --version

          echo 'http://dl-cdn.alpinelinux.org/alpine/v3.15/community' >> /etc/apk/repositories
          echo 'http://dl-cdn.alpinelinux.org/alpine/v3.15/main' >> /etc/apk/repositories

          # Download php7.4
          apk update && apk add php7 php7-cli php7-common \
             php7-zip php7-gd php7-mbstring php7-tokenizer \
             php7-curl php7-bcmath php7-xml \
             php7-intl php7-sqlite3 php7-mysqli php7-dev \
             php7-gmp php7-soap php7-sockets \
             php7-phar php7-dom php7-xmlwriter php7-pdo php7-simplexml \
             php7-session php7-pdo_sqlite

          # Configure php
          ln -s -f /usr/bin/php7 /usr/bin/php
          ln -s -f /usr/bin/php /usr/local/bin/php

          # Configure phpize
          ln -s -f /usr/bin/phpize7 /usr/bin/phpize
          ln -s -f /usr/bin/phpize /usr/local/bin/phpize

          # Configure php-config
          ln -s -f /usr/bin/php-config7 /usr/bin/php-config
          ln -s -f /usr/bin/php-config /usr/local/bin/php-config
        fi

        php -v
    - "XDEBUG config":
        - |
          php_version="$(php -r 'echo PHP_VERSION;' | cut -d '.' -f 1,2)"
          if [ "$ORCA_COVERAGE_ENABLE" = "TRUE" ] &&  [ ${php_version} = 8.1 ]; then
              echo xdebug.mode=coverage > /usr/local/etc/php/conf.d/xdebug.ini
          fi

          if [ "$ORCA_COVERAGE_ENABLE" = "FALSE" ]; then
              mv /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini docker-php-ext-xdebug.ini.back
              mv /usr/local/etc/php/conf.d/xdebug.ini xdebug.ini.back
          fi
    - "Chromedriver config":
      - |
        # chrome and chromedriver downgrade to version below 115.x, we will start
        # testing with latest chromedriver once drupal core's nightwatch tests are
        # passing in them.
        if [ "$ORCA_ENABLE_NIGHTWATCH" = "TRUE" ] || [ "$ORCA_COVERAGE_ENABLE" = "TRUE" ]; then
          echo 'http://dl-cdn.alpinelinux.org/alpine/v3.17/community' >> /etc/apk/repositories
          echo 'http://dl-cdn.alpinelinux.org/alpine/v3.17/main' >> /etc/apk/repositories
          apk update
          apk add 'chromium<115'
          apk add 'chromium-chromedriver<115'
          # Check version to confirm.
          apk version chromium
          apk version chromium-chromedriver
          docker-php-ext-configure intl
          docker-php-ext-install intl
        fi
    - install:
        - cd /ramfs${CI_WORKSPACE}
        - ../orca/bin/ci/install.sh
    - |
      cd /ramfs${CI_WORKSPACE}
      [ -d "../orca-build" ] && composer config allow-plugins true --working-dir=../orca-build -n || exit 0
    - before_script:
        - cd /ramfs${CI_WORKSPACE}
        - ../orca/bin/ci/before_script.sh
    - script:
        - cd /ramfs${CI_WORKSPACE}
        - ../orca/bin/ci/script.sh
    - "Fix Path":
        - |
          if [ "$ORCA_COVERAGE_ENABLE" = TRUE ]; then
            cd /ramfs${CI_WORKSPACE}
            sed -i 's/\/ramfs//' /acquia/acquia_search/clover.xml
            sed -i 's/\/ramfs//' /acquia/acquia_search/junit.xml
          fi
_orca_job: &orca_job
  <<: *orca_steps
_orca_job_allow_failures: &orca_job_allow_failures
  - ignore_failures: true
    <<: *orca_steps
pre_build:
  static_code_analysis:
    - args: --env ORCA_JOB=STATIC_CODE_ANALYSIS
      <<: *orca_job
  # Removing PHP 7.4  and 8.0 jobs as ORCA is not running those currently.
  # integrated_test_on_oldest_supported:
  #   - args: --env ORCA_JOB=INTEGRATED_TEST_ON_OLDEST_SUPPORTED  --env JENKINS_PHP_VERSION=7.4 --env ORCA_VERSION_OVERRIDE=^3
  #     <<: *orca_job
  # integrated_test_on_oldest_supported_php8:
  #   - args: --env ORCA_JOB=INTEGRATED_TEST_ON_OLDEST_SUPPORTED --env JENKINS_PHP_VERSION=8.0 --env ORCA_VERSION_OVERRIDE=^3
  #     <<: *orca_job
  integrated_test_on_oldest_supported_php81:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_OLDEST_SUPPORTED
      <<: *orca_job
  # Removing PHP 7.4  and 8.0 jobs as ORCA is not running those currently.
  # integrated_test_on_latest_lts:
  #   - args: --env ORCA_JOB=INTEGRATED_TEST_ON_LATEST_LTS  --env JENKINS_PHP_VERSION=7.4 --env ORCA_VERSION_OVERRIDE=^3
  #     <<: *orca_job
  ## Testing Previous Minor on php 8.1 as this will resolve to D10 as soon as D 10.1 is released.
  integrated_test_on_prev_minor:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_PREVIOUS_MINOR
      <<: *orca_job
  # integrated_test_from_prev_minor:
  #   - args: --env ORCA_JOB=INTEGRATED_UPGRADE_TEST_FROM_PREVIOUS_MINOR
  #     <<: *orca_job
  isolated_test_on_current:
    - args: --env ORCA_JOB=ISOLATED_TEST_ON_CURRENT --env ORCA_COVERAGE_ENABLE=TRUE --env ORCA_COVERAGE_CLOVER=/acquia/acquia_search/clover.xml --env ORCA_JUNIT_LOG=/acquia/acquia_search/junit.xml
      ca_data: /acquia
      <<: *orca_job
  integrated_test_on_current:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_CURRENT
      <<: *orca_job
  # integrated_test_to_next_minor:
  #   - args: --env ORCA_JOB=INTEGRATED_UPGRADE_TEST_TO_NEXT_MINOR
  #     <<: *orca_job
  # integrated_test_to_next_minor_dev:
  #   - args: --env ORCA_JOB=INTEGRATED_UPGRADE_TEST_TO_NEXT_MINOR_DEV
  #     <<: *orca_job
  isolated_test_on_current_dev:
    - args: --env ORCA_JOB=ISOLATED_TEST_ON_CURRENT_DEV
      <<: *orca_job
  integrated_test_on_current_dev:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_CURRENT_DEV
      <<: *orca_job
  strict_deprecated_code_scan:
    - args: --env ORCA_JOB=STRICT_DEPRECATED_CODE_SCAN
      <<: *orca_job
  isolated_test_on_next_minor:
    - args: --env ORCA_JOB=ISOLATED_TEST_ON_NEXT_MINOR
      <<: *orca_job_allow_failures
  isolated_test_on_next_minor_dev:
    - args: --env ORCA_JOB=ISOLATED_TEST_ON_NEXT_MINOR_DEV
      <<: *orca_job
  integrated_test_on_next_minor:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_NEXT_MINOR
      <<: *orca_job
  integrated_test_on_next_minor_dev:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_NEXT_MINOR_DEV
      <<: *orca_job
  # isolated_test_on_current_php8:
  #   - args: --env ORCA_JOB=ISOLATED_TEST_ON_CURRENT --env JENKINS_PHP_VERSION=8.0
  #     <<: *orca_job
  deprecated_code_scan_with_contrib:
    - args: --env ORCA_JOB=DEPRECATED_CODE_SCAN_W_CONTRIB
      <<: *orca_job
  loose_deprecated_code_scan:
    - args: --env ORCA_JOB=LOOSE_DEPRECATED_CODE_SCAN
      <<: *orca_job

  # php 8.2 tests
  static_code_analysis_php82:
    - args: --env ORCA_JOB=STATIC_CODE_ANALYSIS --env JENKINS_PHP_VERSION=8.2
      <<: *orca_job
  isolated_test_on_next_minor_dev_php82:
    - args: --env ORCA_JOB=ISOLATED_TEST_ON_NEXT_MINOR_DEV --env JENKINS_PHP_VERSION=8.2
      <<: *orca_job
  isolated_test_on_current_php82:
    - args: --env ORCA_JOB=ISOLATED_TEST_ON_CURRENT --env JENKINS_PHP_VERSION=8.2
      <<: *orca_job
  # isolated_test_on_next_major_latest_minor_beta_later:
  #   - args: --env ORCA_JOB=ISOLATED_TEST_ON_NEXT_MAJOR_LATEST_MINOR_BETA_OR_LATER
  #     <<: *orca_job
  # integrated_test_on_next_major_latest_minor_beta_later:
  #   - args: --env ORCA_JOB=INTEGRATED_TEST_ON_NEXT_MAJOR_LATEST_MINOR_BETA_OR_LATER
  #     <<: *orca_job
  # isolated_test_on_next_major_latest_minor_dev:
  #   - args: --env ORCA_JOB=ISOLATED_TEST_ON_NEXT_MAJOR_LATEST_MINOR_DEV
  #     <<: *orca_job
  # integrated_test_on_next_major_latest_minor_dev:
  #   - args: --env ORCA_JOB=INTEGRATED_TEST_ON_NEXT_MAJOR_LATEST_MINOR_DEV
  #     <<: *orca_job
  # isolated_upgrade_test_to_next_major_dev:
  #   - args: --env ORCA_JOB=ISOLATED_UPGRADE_TEST_TO_NEXT_MAJOR_DEV
  #     <<: *orca_job
  # isolated_upgrade_test_to_next_major_beta_later:
  #   - args: --env ORCA_JOB=ISOLATED_UPGRADE_TEST_TO_NEXT_MAJOR_BETA_OR_LATER
  #     <<: *orca_job


  security_composition_analysis:
    required: false

  code_analysis:
    required: true
    project_key: acquia.drupal-cloud.dit:acquia_search
    quality_gate:
      wait_for_quality_gate: false
      max_time_limit: 2
      abort_pipeline: false

#notify:
#  channel: drupal-integration-eng
#  on_success: change
#  on_failure: always
