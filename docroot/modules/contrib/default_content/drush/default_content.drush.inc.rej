--- drush/default_content.drush.inc
+++ drush/default_content.drush.inc
@@ -70,21 +70,40 @@ function drush_default_content_export($entity_type_id, $entity_id) {
  *   The entity type ID.
  * @param mixed $entity_id
  *   (Optional) The entity ID to export or all entities will be exported.
+ *
+ * @option folder
+ *   Folder to export to, entities are grouped by entity type into directories.
+ * @option property-name
+ *   The property name to be uses for filtering if an entity_id is not provided.
+ *   If no $entity_type_id is provided, this will be ignored.
+ * @option property-value
+ *   The value of the property. If no property-name is provided, this will be ignored.
  */
-function drush_default_content_export_references($entity_type_id, $entity_id = NULL) {
-  /** @var \Drupal\default_content\ExporterInterface $exporter */
+function drush_default_content_export_references($entity_type_id = NULL, $entity_id = NULL) {
   $exporter = \Drupal::service('default_content.exporter');
-
   $folder = drush_get_option('folder', '.');
-  if (is_null($entity_id)) {
-    $entities = \Drupal::entityQuery($entity_type_id)->execute();
+
+  /** @var \Drupal\default_content\ExporterInterface $exporter */
+  if ($entity_type_id && $entity_id) {
+    return $exporter->exportContentWithReferences($entity_type_id, $entity_id, $folder);
   }
-  else {
-    $entities = [$entity_id];
+
+  if ($property_name = drush_get_option('property-name') && $property_value = drush_get_option('property-value')) {
+    $properties = [
+      $property_name => $property_value,
+    ];
+  }
+
+  $entities = $exporter->resolveExportedEntities($entity_type_id, $entity_id, $properties ?? []);
+  if (empty($entities)) {
+    return;
   }
+
   // @todo Add paging.
-  foreach ($entities as $entity_id) {
-    $exporter->exportContentWithReferences($entity_type_id, $entity_id, $folder);
+  foreach ($entities as $entity_type_id => $entity_ids) {
+    foreach ($entity_ids as $entity_id) {
+      $exporter->exportContentWithReferences($entity_type_id, $entity_id, $folder);
+    }
   }
 }
 
