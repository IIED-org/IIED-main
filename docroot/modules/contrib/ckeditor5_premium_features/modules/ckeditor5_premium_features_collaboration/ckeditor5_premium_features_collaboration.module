<?php

/*
 * Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see https://ckeditor.com/legal/ckeditor-oss-license
 */

/**
 * @file
 * Implements hooks for the CKEditor 5 Premium Features Collaboration module.
 */

declare(strict_types=1);

use Drupal\ckeditor5\Plugin\CKEditor5PluginDefinition;
use Drupal\ckeditor5_premium_features\Utility\LibraryDefinitionItem;
use Drupal\ckeditor5_premium_features_collaboration\Entity\CollaborationEntityInterface;
use Drupal\ckeditor5_premium_features_collaboration\Entity\CommentInterface;
use Drupal\ckeditor5_premium_features_collaboration\Entity\RevisionInterface;
use Drupal\ckeditor5_premium_features_collaboration\Entity\SuggestionInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\ckeditor5_premium_features_collaboration\Element\TextFormat;
use Drupal\Core\Url;

/**
 * Implements hook_library_info_build().
 */
function ckeditor5_premium_features_collaboration_library_info_build(): array {
  /** @var \Drupal\ckeditor5_premium_features\Config\SettingsConfigHandlerInterface $config_handler */
  $config_handler = \Drupal::service('ckeditor5_premium_features.config_handler.settings');

  $libraries = [
    'track-changes',
    'comments',
    'revision-history',
  ];

  $definitions = [];

  foreach ($libraries as $library) {
    $definition = new LibraryDefinitionItem($library, $config_handler->getDllLocation());
    $definition->addRemoteJs($definition->id());

    $definitions[$definition->id()] = $definition->getDefinition();
  }

  return $definitions;
}

function ckeditor5_premium_features_collaboration_ckeditor5_plugin_info_alter(array &$plugin_definitions) {
  $libraryVersionChecker = \Drupal::service('ckeditor5_premium_features.core_library_version_checker');
  if (!$libraryVersionChecker->isLibraryVersionHigherOrEqual('44.2.0')) {
    $definition = $plugin_definitions["ckeditor5_premium_features_collaboration__track_changes"]->toArray();
    $key = array_search('trackChanges.TrackChangesPreview', $definition["ckeditor5"]["plugins"]);
    if ($key) {
      unset($definition["ckeditor5"]["plugins"][$key]);
      $pluginDefinition = new CKEditor5PluginDefinition($definition);
      $plugin_definitions['ckeditor5_premium_features_collaboration__track_changes'] = $pluginDefinition;
    }
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * @see \Drupal\filter\Element\TextFormat
 */
function ckeditor5_premium_features_collaboration_field_widget_single_element_form_alter(array &$element, FormStateInterface $form_state, array $context) : void {
  $type = $element['#type'] ?? NULL;

  if ($type !== 'text_format') {
    return;
  }

  /** @var \Drupal\Core\Field\FieldItemListInterface|null $items */
  $items = $context['items'] ?? NULL;
  $entity = $items?->getEntity();

  if ($entity instanceof EntityInterface) {
    $entity_context = [
      'data-entity' => $entity->uuid(),
      'data-entity-type' => $entity->getEntityTypeId(),
    ];
    $element['#attributes'] = $entity_context + $element['#attributes'];
  }
}

/**
 * Implements hook_element_info_alter().
 */
function ckeditor5_premium_features_collaboration_element_info_alter(array &$info): void {
  if (isset($info['text_format'])) {
    $info['text_format']['#process'][] = [TextFormat::class, 'process'];
  }
}

/**
 * Implements hook_form_alter().
 */
function ckeditor5_premium_features_collaboration_form_alter(&$form, FormStateInterface $form_state) {
  TextFormat::processFormWithCollaborationStorage($form, $form_state);
}

/**
 * Implements hook_entity_delete().
 *
 * Remove collaboration entities after parent entity is deleted.
 */
function ckeditor5_premium_features_collaboration_entity_delete(EntityInterface $entity): void {
  ckeditor5_premium_features_collaboration_remove_collaborations_entities($entity);
}

/**
 * Implements hook_entity_translation_delete().
 *
 * Remove collaboration entities after parent translation entity is deleted.
 */
function ckeditor5_premium_features_collaboration_entity_translation_delete(EntityInterface $translation): void {
  ckeditor5_premium_features_collaboration_remove_collaborations_entities($translation, TRUE);
}

/**
 * Removes all collaborations entities related to the entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 * @param bool $is_translation
 *   Flag for removing translation.
 */
function ckeditor5_premium_features_collaboration_remove_collaborations_entities(EntityInterface $entity, bool $is_translation = FALSE): void {

  if ($entity instanceof CollaborationEntityInterface) {
    return;
  }

  $id = $entity->uuid();

  if (!$id) {
    return;
  }

  $entity_type_manager = Drupal::entityTypeManager();
  $storages = [
    SuggestionInterface::ENTITY_TYPE_ID => $entity_type_manager->getStorage(SuggestionInterface::ENTITY_TYPE_ID),
    CommentInterface::ENTITY_TYPE_ID => $entity_type_manager->getStorage(CommentInterface::ENTITY_TYPE_ID),
    RevisionInterface::ENTITY_TYPE_ID => $entity_type_manager->getStorage(RevisionInterface::ENTITY_TYPE_ID),
  ];

  foreach ($storages as $storage) {
    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
    $query = $storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('entity_id', $id)
      ->condition('entity_type', $entity->getEntityTypeId());

    if ($is_translation) {
      $langcode = $entity->language()->getId();
      $query->condition('langcode', $langcode);
    }

    $ids = $query->execute();

    if (!$ids) {
      continue;
    }

    $entities = $storage->loadMultiple($ids);
    $storage->delete($entities);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ckeditor5_premium_features_collaboration_form_filter_format_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $moduleName = basename(__FILE__, '.module');
  $permissionsUrl = Url::fromRoute('user.admin_permissions.module', ['modules' => $moduleName])->toString();
  $description = t('In order to setup CKEditor5 Collaboration permissions go to: <a href=":url">Permissions page</a>',
    [':url' => $permissionsUrl]);
  $form['roles']['#description'] = $description;
}
