<?php

namespace Drupal\alogin\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\user\Entity\User;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Drupal\Core\Url;

/**
 * Class TwoFaForm.
 */
class TwoFaForm extends FormBase
{

    /**
     * Drupal\Core\StringTranslation\TranslationManager definition.
     *
     * @var \Drupal\Core\StringTranslation\TranslationManager
     */
    protected $stringTranslation;

    /**
     * Drupal\Core\Session\AccountInterface definition.
     *
     * @var \Drupal\Core\Session\AccountInterface
     */
    protected $currentId;

    /**
     * Drupal\alogin\AuthenticatorService definition.
     *
     * @var \Drupal\alogin\AuthenticatorService
     */
    protected $authenticator;

    /**
     * Drupal\Core\Session\AccountProxy definition.
     *
     * @var \Drupal\Core\Session\AccountProxy
     */
    protected $currentUser;

    /**
     * Drupal\Core\Messenger\Messenger definition.
     *
     * @var \Drupal\Core\Messenger\Messenger
     */
    protected $messenger;

    /**
     * Drupal\Core\TempStore\PrivateTempStoreFactory definition.
     *
     * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
     */
    protected $tempstorePrivate;

    /**
     * {@inheritdoc}
     */
    public static function create(ContainerInterface $container)
    {
        $instance = parent::create($container);
        $instance->stringTranslation = $container->get('string_translation');
        $instance->authenticator = $container->get('alogin.authenticator');
        $instance->currentUser = $container->get('current_user');
        $instance->messenger = $container->get('messenger');
        $instance->tempstorePrivate = $container->get('tempstore.private');
        $instance->currentId = $instance->tempstorePrivate->get('alogin')->get('uid');
        return $instance;
    }

    /**
     * {@inheritdoc}
     */
    public function getFormId()
    {
        return 'two_fa_form';
    }

    /**
     * {@inheritdoc}
     */
    public function buildForm(array $form, FormStateInterface $form_state)
    {
        $form['code'] = [
        '#type' => 'textfield',
        '#title' => t('Code'),
        '#description' => t('Enter the code generated by the authenticator app.'),
        '#required' => true,
        '#weight' => 20,
        ];
        $form['submit'] = [
        '#type' => 'submit',
        '#value' => $this->t('Login'),
        '#weight' => 21,
        '#ajax' => [
        'callback' => '::loginCallback',
        'event' => 'click',
        ]
        ];

        return $form;
    }

    /**
     * {@inheritdoc}
     */
    public function validateForm(array &$form, FormStateInterface $form_state)
    {
        if ($this->authenticator->check($form_state->getValue('code')) == false) {
            $form_state->setErrorByName('code', $this->t('Invalid or expired code.'));
        }
        parent::validateForm($form, $form_state);
    }

    public function loginCallback(array &$form, FormStateInterface $form_state)
    {
        $response = new AjaxResponse();
        if ($form_state->getErrors()) {
            unset($form['#prefix']);
            unset($form['#suffix']);
            $form['status_messages'] = [
            '#type'   => 'status_messages',
            '#weight' => -10,
            ];
            $form_state->setRebuild();
            $response->addCommand(new ReplaceCommand('.two-fa-form', $form));
            return $response;
        }
        $account = User::load($this->currentId);
        user_login_finalize($account);
        $this->tempstorePrivate->get('alogin')->delete('secret');
        $this->tempstorePrivate->get('alogin')->delete('uid');
        $response->addCommand(new RedirectCommand(Url::fromRoute('user.page')->toString()));
        return $response;
    }

    /**
     * {@inheritdoc}
     */
    public function submitForm(array &$form, FormStateInterface $form_state)
    {
    }

}
