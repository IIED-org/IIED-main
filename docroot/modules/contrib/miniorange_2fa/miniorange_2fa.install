<?php

/**
 * Implements hook_schema().
 * Defines the database tables used by this
 * module.
 * @see hook_schema()
 * @ingroup lotus
 */

use Drupal\Core\Database\Database;

/**
 * Implements hook_install().
 */
function miniorange_2fa_install()
{
    $editConfig = \Drupal::configFactory()->getEditable('miniorange_2fa.settings');
    $editConfig->set('mo_auth_enable_backdoor', 1);
    $editConfig->set('allow_end_users_to_decide', FALSE);
    $editConfig->set('mo_auth_custom_organization_name', 'login')->save();
    $editConfig->set('mo_auth_2fa_kba_questions', 'Allowed')->save();
    $editConfig->set('mo_auth_rba_duration', 3)->save();
    $editConfig->set('rba_allowed_devices', 1)->save();

    $database      = \Drupal::database();
    $restore_table = $database->schema()->tableExists('UserAuthenticationType_backup');
    if($restore_table) {
        $database->schema()->dropTable('UserAuthenticationType');
        $database->schema()->renameTable('UserAuthenticationType_backup','UserAuthenticationType');
        \Drupal::logger('miniorange_2fa')->info('<code>UserAuthenticationType</code> table was successfully restored.');
    }
}

function miniorange_2fa_uninstall()
{
    $keep_configuration = \Drupal::request()->request->get('keep_configuration');
    if($keep_configuration) {
        $database = \Drupal::database();
        $database->schema()->renameTable('UserAuthenticationType','UserAuthenticationType_backup');
        \Drupal::logger('miniorange_2fa')->info('<code>UserAuthenticationType</code> table was successfully backed up.');
    }
    \Drupal::configFactory()->getEditable('miniorange_2fa.settings')->delete();
}

function miniorange_2fa_schema()
{
    $schema['UserAuthenticationType'] = array(
        'description' => 'Stores example user ID and his authentication type.',
        'fields' => array(
            'uid' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => " user's id",
            ),
            'configured_auth_methods' => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'default' => '',
                'description' => 'authentication type of user.',
            ),
            'miniorange_registered_email' => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'default' => '',
                'description' => 'miniorange registered email.',
            ),
            'activated_auth_methods' => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'default' => 'EMAIL',
                'description' => 'activated authentication type of user.',
            ),
            'enabled' => array(
                'type' => 'int',
                'size' => 'tiny',
                'not null' => FALSE,
                'default' => 1,
                'description' => 'Boolean indicating whether the MFA is enabled.',
            ),
            'qr_code_string' => array(
                'type' => 'text',
                'not null' => FALSE,
                'description' => 'QR code to configure TOTP 2FA on multiple devices',
            ),
            'phone_number' => array(
                'type' => 'varchar',
                'length' => 20,
                'not null' => FALSE,
                'default' => NULL,
                'description' => 'Users phone number to deliver passcode(OTP)',
            ),
            'device_info' => array(
                'type' => 'text',
                'not null' => FALSE,
                'default' => NULL,
                'description' => 'Device specific info',
            ),
        ),
        'primary key' => array('uid'),
    );
    return $schema;
}

function miniorange_2fa_update_8217()
{
    $editConfig = \Drupal::configFactory()->getEditable('miniorange_2fa.settings');
    $editConfig->set('allow_end_users_to_decide', FALSE);
    $newField = [
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 1,
        'description' => 'Boolean indicating whether the MFA is enabled.',
    ];
    $schema = Database::getConnection()->schema();
    $schema->addField('UserAuthenticationType', 'enabled', $newField);
}


/**
 * Add "qr_code_string" column into
 * "UserAuthenticationType" table.
 */
function miniorange_2fa_update_8301()
{
    $newFieldQrCode = [
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'QR code to configure TOTP 2FA on multiple devices',
    ];
    $schema = Database::getConnection()->schema();
    $schema->addField('UserAuthenticationType', 'qr_code_string', $newFieldQrCode);
    return t('Added "qr_code_string" column into "UserAuthenticationType" table.');
}

/**
 * Add "phone_number" column into
 * "UserAuthenticationType" table.
 */
function miniorange_2fa_update_8302()
{
    $newFieldQrCode = [
        'type' => 'varchar',
        'length' => 20,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'Phone number to deliver passcode(OTP)',
    ];

    $schema = Database::getConnection()->schema();
    $schema->addField('UserAuthenticationType', 'phone_number', $newFieldQrCode);
    return t('Added "phone_number" column into "UserAuthenticationType" table.');
}

/**
 * Configurable 2FA methods added for Role Based 2FA
 */
function miniorange_2fa_update_8303() {
    $configFactory = \Drupal::configFactory()->getEditable('miniorange_2fa.settings');
    $selected_roles = $configFactory->get('mo_auth_role_based_2fa_roles');
    if(!empty($selected_roles)) {
        $selected_roles = json_decode($selected_roles, TRUE);
        foreach ($selected_roles as $key => $value) {
            $selected_roles[$key] = 'ALL SELECTED METHODS';
        }
        $configFactory->set('miniorange_2fa.settings', $selected_roles)->save();
    }
}

/**
 * Add the columns for Remember My Device
 */
function miniorange_2fa_update_8304()
{
    $editConfig = \Drupal::configFactory()->getEditable('miniorange_2fa.settings');
    $editConfig->set('mo_auth_rba_duration', 1)->save();
    $editConfig->set('rba_allowed_devices', 1)->save();

    $device_info_column = [
        'type' => 'text',
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'Device specific info',
    ];

    $schema = Database::getConnection()->schema();
    if(!\Drupal::database()->schema()->fieldExists('UserAuthenticationType', 'device_info')) {
        $schema->addField('UserAuthenticationType', 'device_info', $device_info_column);
    }

    return t('Added columns for "RBA" into "UserAuthenticationType" table.');
}


/**
 * Add primary key to the "UserAuthenticationType" table
 */
function miniorange_2fa_update_8305() {
  $schema = Database::getConnection()->schema();
  try {
    $schema->addPrimaryKey('UserAuthenticationType', ['uid']);
    return t('Primary key successfully added to "UserAuthenticationType" table');
  }
  catch (\Exception $exception) {
    \Drupal::logger('miniorange_2fa')->error($exception);
    return t('Something went wrong while adding adding primary key to "UserAuthenticationType" table. Please see recent log messages for details');
  }
}

/**
 * Replacing whitelist word with trusted in the module
 */
function miniorange_2fa_update_8306() {
  $configFactory = \Drupal::configFactory()->getEditable('miniorange_2fa.settings');
  $configFactory->set('mo_auth_enable_trusted_IPs',$configFactory->get('mo_auth_enable_whitelist_IPs'))->save();
  $configFactory->set('mo_auth_whitelisted_IP_address',$configFactory->get('mo_auth_trusted_IP_address'))->save();

}
