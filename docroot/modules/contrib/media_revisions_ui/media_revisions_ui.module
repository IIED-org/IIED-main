<?php

/**
 * @file
 * Contains media_revisions_ui.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\media\MediaInterface;

/**
 * Implements hook_help().
 */
function media_revisions_ui_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the media_revisions_ui module.
    case 'help.page.media_revisions_ui':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Media Revisions UI module adds a Revisions tab for Media entities, where revisions can be reverted or deleted.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Administering media revisions') . '</dt>';
      $output .= '<dd>' . t('The Media Revisions UI module enables you to revert to older versions of media or delete a revision using the Revisions tab.') . '</dd>';
      $output .= '<dt>' . t('User permissions') . '</dt>';
      $output .= '<dd>' . t('The Media Revisions UI module uses the Media permissions, which can be set by role on the <a href=":permissions">permissions page</a>.', [
        ':permissions' => Url::fromRoute('user.admin_permissions', [], ['fragment' => 'module-media'])->toString(),
      ]) . '</dd>';
      $output .= '</dl>';

      return $output;

    default:
      return '';
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function media_revisions_ui_media_access(MediaInterface $entity, $operation, AccountInterface $account) {
  $revisionOperationsMap = [
    'view all revisions' => ['view', 'view'],
    'view revision' => ['view', 'view'],
    'revert revision' => ['revert', 'update'],
    'delete revision' => ['delete', 'delete'],
  ];

  [$revisionPermissionOperation, $entityOperation] = $revisionOperationsMap[$operation] ?? [
    NULL,
    NULL,
  ];

  if (!$revisionPermissionOperation) {
    return AccessResult::neutral();
  }

  $bundle = $entity->bundle();
  if (
    !$account->hasPermission("$revisionPermissionOperation all media revisions") &&
    !$account->hasPermission("$revisionPermissionOperation $bundle media revisions") &&
    !$account->hasPermission('administer media')
  ) {
    return AccessResult::neutral();
  }

  // If this is the default revision, return access denied for revert or
  // delete operations.
  if (
    $entity->isDefaultRevision() &&
    ($operation === 'revert revision' || $operation === 'delete revision')
  ) {
    return AccessResult::forbidden();
  }
  elseif ($account->hasPermission('administer media')) {
    return AccessResult::allowed();
  }

  // First check the access to the default revision and finally, if the media
  // passed in is not the default revision then check access to that, too.
  $storage = Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());
  $access = $storage->load($entity->id())->access($entityOperation, $account, TRUE);
  if (!$entity->isDefaultRevision()) {
    $access = $access->andIf($entity->access($entityOperation, $account, TRUE));
  }

  return $access;
}
