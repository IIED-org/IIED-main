--- modules/video_embed_wysiwyg/js/build/videoEmbed.js
+++ modules/video_embed_wysiwyg/js/build/videoEmbed.js
@@ -1 +1 @@
-!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/videoEmbed/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _videoembed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembed */ "./js/ckeditor5_plugins/videoEmbed/src/videoembed.js");\n\n\n// @todo Remove console.log calls.\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  VideoEmbed: _videoembed__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/index.js?')},"./js/ckeditor5_plugins/videoEmbed/src/videoembed.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ VideoEmbed)\n/* harmony export */ });\n/* harmony import */ var _videoembedediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembedediting */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js");\n/* harmony import */ var _videoembedui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./videoembedui */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n\n\n\n\nclass VideoEmbed extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n\nstatic get requires() {\n    return [_videoembedediting__WEBPACK_IMPORTED_MODULE_0__["default"], _videoembedui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembed.js?')},"./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js":()=>{eval('throw new Error("Module parse failed: Unexpected token (61:4)\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\\n|       // @todo register allowed model attributes.\\n|       allowAttributes:\\n>     });\\n|   }\\n| ");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js?')},"./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../icons/play-circle.svg */ \"./icons/play-circle.svg\");\n/**\n * @file registers the videoEmbed toolbar button and binds functionality to it.\n */\n\n\n\n\n/* @todo Choose the best icon and remove others. */\n\n\nclass VideoEmbedUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n\n    // This will register the videoEmbed toolbar button.\n    editor.ui.componentFactory.add('videoEmbed', (locale) => {\n      const command = editor.commands.get('insertVideoEmbed');\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Video Embed'),\n        icon: _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () => {\n            console.log('button execution');\n            this.openEditingDialog();\n          }\n      );\n\n      return buttonView;\n    });\n  }\n\n  /**\n   * Opens video embed form when the editing button is clicked.\n   */\n  openEditingDialog() {\n    console.log('dialog opening');\n    const {editor} = this;\n\n    // If the selected element while we click the button is an instance\n    // of the video_embed widget, extract it's values so they can be\n    // sent to the server to prime the configuration form.\n    let existingValues = {};\n    const selectedVideoEmbedElement = this._getSelectedVideoEmbedElement()\n    if (selectedVideoEmbedElement) {\n      // @todo adapt this copy-pasted code.\n      existingValues = selectedVideoEmbedElement.hasAttribute('data-entity-uuid') ? {\n        'data-entity-uuid': selectedVideoEmbedElement.getAttribute('data-entity-uuid'),\n        'data-entity-type': selectedVideoEmbedElement.getAttribute('data-entity-type'),\n      } : {};\n    }\n\n    this._openDialog(\n        Drupal.url('video-embed-wysiwyg/dialog/' + editor.config.get('videoEmbed').format),\n        existingValues,\n        ({attributes}) => {\n          editor.execute('insertVideoEmbed', attributes);\n        },\n        {\n          title: Drupal.t('Video Embed'),\n          dialogClass: 'video-embed-dialog'\n        }\n    );\n  }\n\n  /**\n   * @todo Return the focused videoEmbed element (the cke5 widget system may\n   * help with that).\n   *\n   * @private\n   */\n  _getSelectedVideoEmbedElement() {\n    return null;\n  }\n\n  /**\n   * This method is adopted from drupal's ckeditor5.js file due to an issue\n   * where the \"editor_object\" isn't passed to the ajax request.\n   *\n   * See https://www.drupal.org/project/drupal/issues/3303191\n   *\n   * @param {string} url\n   *   The URL that contains the contents of the dialog.\n   * @param {object} existingValues\n   *   Existing values that will be sent via POST to the url for the dialog\n   *   contents.\n   * @param {function} saveCallback\n   *   A function to be called upon saving the dialog.\n   * @param {object} dialogSettings\n   *   An object containing settings to be passed to the jQuery UI.\n   */\n  _openDialog(url, existingValues, saveCallback, dialogSettings = {}) {\n    // Add a consistent dialog class.\n    const classes = dialogSettings.dialogClass\n        ? dialogSettings.dialogClass.split(' ')\n        : [];\n    classes.push('ui-dialog--narrow');\n    dialogSettings.dialogClass = classes.join(' ');\n    dialogSettings.autoResize =\n        window.matchMedia('(min-width: 600px)').matches;\n    dialogSettings.width = 'auto';\n\n    const ckeditorAjaxDialog = Drupal.ajax({\n      dialog: dialogSettings,\n      dialogType: 'modal',\n      selector: '.ckeditor5-dialog-loading-link',\n      url,\n      progress: {type: 'fullscreen'},\n      submit: {\n        editor_object: existingValues,\n      },\n    });\n    ckeditorAjaxDialog.execute();\n\n    // Store the save callback to be executed when this dialog is closed.\n    Drupal.ckeditor5.saveCallback = saveCallback;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js?")},"./icons/play-circle.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d=\\"M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./icons/play-circle.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var _=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](_,_.exports,__webpack_require__),_.exports}__webpack_require__.d=(e,t)=>{for(var _ in t)__webpack_require__.o(t,_)&&!__webpack_require__.o(e,_)&&Object.defineProperty(e,_,{enumerable:!0,get:t[_]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/videoEmbed/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));+!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/videoEmbed/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _videoembed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembed */ "./js/ckeditor5_plugins/videoEmbed/src/videoembed.js");\n\n\n// @todo Remove console.log calls.\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  VideoEmbed: _videoembed__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/index.js?')},"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertVideoEmbedCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertVideoEmbedCommand, which is executed when the videoEmbed\n * toolbar button is pressed.\n */\n\n\n\nclass InsertVideoEmbedCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute(attributes) {\n    console.log('command execution');\n    console.log(attributes);\n    const {model} = this.editor;\n\n    model.change((writer) => {\n      // Insert <videoEmbed *></videoEmbed> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createVideoEmbed(writer, attributes));\n    });\n  }\n\n  refresh() {\n    const {model} = this.editor;\n    const {selection} = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // videoEmbed is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n        selection.getFirstPosition(),\n        'videoEmbed',\n    );\n\n    // If the cursor is not in a location where a videoEmbed can be added,\n    // return null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createVideoEmbed(writer, attributes) {\n  // Create instances of the element registered with the editor in\n  // videoembedediting.js.\n  const videoEmbed = writer.createElement('videoEmbed', attributes);\nconsole.log('createVideoEmbed');\nconsole.log(videoEmbed);\n\n  // Return the element to be added to the editor.\n  return videoEmbed;\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembed.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ VideoEmbed)\n/* harmony export */ });\n/* harmony import */ var _videoembedediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembedediting */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js");\n/* harmony import */ var _videoembedui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./videoembedui */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n\n\n\n\nclass VideoEmbed extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n\nstatic get requires() {\n    return [_videoembedediting__WEBPACK_IMPORTED_MODULE_0__["default"], _videoembedui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembed.js?')},"./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertvideoembedcommand */ \"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js\");\n\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with videoEmbed as this model:\n * <videoEmbed videoUrl=\"https://some.video.url\" responsive=\"trueorfalse\"\n * width=\"42\" height=\"42\" autoplay=\"trueorfalse\"\n * previewThumbnail=\"/some/image/path.jpg\" settingsSummary=\"Some help\n * text.\"></videoEmbed>\n *\n * Which is converted in database (dataDowncast) as this \"text\":\n * {\"preview_thumbnail\":\"/some/image/path.jpg\",\n * \"video_url\":\"https://some.video.url\",\"settings\":{\"responsive\":0or1,\"width\":\"42\",\"height\":\"42\",\"autoplay\":0or1}\",\n * settings_summary\":[\"Some help text.\"]}\n *\n * The Drupal video_embed_wysiwyg format filter will then convert this into a\n * real HTML video embed, on PHP frontend rendering.\n *\n * videoEmbed model elements are also converted to HTML for preview in CKE5 UI\n * (editingDowncast).\n *\n * And the database markup can be converted back to model (upcast).\n *\n * This file has the logic for defining the videoEmbed model, and for how it is\n * converted from/to standard DOM markup for database/UI.\n */\nclass VideoEmbedEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n        'insertVideoEmbed',\n        new _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <videoEmbed *></videoEmbed>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n\n    schema.register('videoEmbed', {\n      inheritAllFrom: '$blockObject',\n      allowAttributes: ['videoUrl', 'responsive', 'width', 'height', 'autoplay', 'previewThumbnail', 'settingsSummary']\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const {conversion} = this.editor;\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If {\"preview_thumbnail\":......} is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <videoEmbed> model.\n    // @todo Implement this, see video_embed_wysiwyg/plugin/plugin.js\n    //conversion.for('upcast').[...]\n\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <videoEmbed> are saved as\n    // {\"preview_thumbnail\":......}.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'videoEmbed',\n      view: (modelElement, {writer}) => {\n        const data = {};\n        data.preview_thumbnail = modelElement.getAttribute('previewThumbnail');\n        data.video_url = modelElement.getAttribute('videoUrl');\n        data.settings = {};\n        ['responsive', 'width', 'height', 'autoplay'].forEach(function (attributeName) {\n          data.settings[attributeName] = modelElement.getAttribute(attributeName);\n        });\n        data.settings_summary = [modelElement.getAttribute('settingsSummary')];\n        return writer.createText(JSON.stringify(data));\n      }\n    });\n\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <videoEmbed> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n          model: 'videoEmbed',\n          view: (modelElement, {writer}) => {\n            const preview = writer.createContainerElement('span', {class: 'video-embed-widget'}, [\n              writer.createEmptyElement('img', {\n                class: 'video-embed-widget__image',\n                src: modelElement.getAttribute('previewThumbnail')\n              }),\n              writer.createContainerElement('span', {class: 'video-embed-widget__summary'}, [\n                writer.createText(modelElement.getAttribute('settingsSummary'))\n              ])\n            ]);\n\n            return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(preview, writer, {label: Drupal.t('Video Embed')});\n          }\n        }\n    );\n  }\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../icons/play-circle.svg */ \"./icons/play-circle.svg\");\n/**\n * @file registers the videoEmbed toolbar button and binds functionality to it.\n */\n\n\n\n\n/* @todo Choose the best icon and remove others. */\n\n\nclass VideoEmbedUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n\n    // This will register the videoEmbed toolbar button.\n    editor.ui.componentFactory.add('videoEmbed', (locale) => {\n      const command = editor.commands.get('insertVideoEmbed');\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Video Embed'),\n        icon: _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () => {\n            console.log('button execution');\n            this.openEditingDialog();\n          }\n      );\n\n      return buttonView;\n    });\n  }\n\n  /**\n   * Opens video embed form when the editing button is clicked.\n   */\n  openEditingDialog() {\n    console.log('dialog opening');\n    const {editor} = this;\n\n    // If the selected element while we click the button is an instance\n    // of the video_embed widget, extract its values so they can be\n    // sent to the server to prime the configuration form.\n    let existingValues = {settings: {}};\n    const selectedVideoEmbedElement = this._getSelectedVideoEmbedElement()\n    if (selectedVideoEmbedElement) {\n      // @todo ensure this is the right way to implement this (ensure the\n      // element is indeed a model one, not a view one).\n      if (selectedVideoEmbedElement.hasAttribute('videoUrl')) {\n        existingValues.video_url = selectedVideoEmbedElement.getAttribute('videoUrl');\n      }\n      ['responsive', 'width', 'height', 'autoplay'].foreach(function (attributeName) {\n        if (selectedVideoEmbedElement.hasAttribute(attributeName)) {\n          existingValues.settings.attributeName = selectedVideoEmbedElement.getAttribute(attributeName);\n        }\n      });\n    }\n    console.log('calling this._openDialog');\n    this._openDialog(\n        Drupal.url('video-embed-wysiwyg/dialog/' + editor.config.get('videoEmbed').format),\n        existingValues,\n        (newValues) => {\n\n          const attributes = {\n            videoUrl: newValues.video_url,\n            responsive: newValues.settings.responsive,\n            width: newValues.settings.width,\n            height: newValues.settings.height,\n            autoplay: newValues.settings.autoplay,\n            // These attributes are useful only for editor preview, but are\n            // keeped on dataDowncast so that they can be retrieved on later\n            // upcast+editingDowncast.\n            settingsSummary: newValues.settings_summary[0],\n            previewThumbnail: newValues.preview_thumbnail,\n          }\n          console.log('attributes:');\n          console.log(attributes);\n          editor.execute('insertVideoEmbed', attributes);\n        },\n        {\n          title: Drupal.t('Video Embed'),\n          dialogClass: 'video-embed-dialog'\n        }\n    );\n  }\n\n  /**\n   * @todo Return the focused videoEmbed element (the cke5 widget system may\n   * help with that).\n   *\n   * @private\n   */\n  _getSelectedVideoEmbedElement() {\n    return null;\n  }\n\n  /**\n   * This method is adapted from drupal's ckeditor5.js file due to an issue\n   * where the \"editor_object\" isn't passed to the ajax request.\n   *\n   * See https://www.drupal.org/project/drupal/issues/3303191\n   *\n   * @param {string} url\n   *   The URL that contains the contents of the dialog.\n   * @param {object} existingValues\n   *   Existing values that will be sent via POST to the url for the dialog\n   *   contents.\n   * @param {function} saveCallback\n   *   A function to be called upon saving the dialog.\n   * @param {object} dialogSettings\n   *   An object containing settings to be passed to the jQuery UI.\n   */\n  _openDialog(url, existingValues, saveCallback, dialogSettings = {}) {\n    console.log('_openDialog');\n    // Add a consistent dialog class.\n    const classes = dialogSettings.dialogClass\n        ? dialogSettings.dialogClass.split(' ')\n        : [];\n    classes.push('ui-dialog--narrow');\n    dialogSettings.dialogClass = classes.join(' ');\n    dialogSettings.autoResize =\n        window.matchMedia('(min-width: 600px)').matches;\n    dialogSettings.width = 'auto';\n\n    const ckeditorAjaxDialog = Drupal.ajax({\n      dialog: dialogSettings,\n      dialogType: 'modal',\n      selector: '.ckeditor5-dialog-loading-link',\n      url,\n      progress: {type: 'fullscreen'},\n      submit: {\n        editor_object: existingValues,\n      },\n    });\n    console.log('ckeditorAjaxDialog.execute()');\n    ckeditorAjaxDialog.execute();\n\n    // Store the save callback to be executed when this dialog is closed.\n    console.log('storing the right callback');\n    Drupal.ckeditor5.saveCallback = saveCallback;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js?")},"./icons/play-circle.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d=\\"M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./icons/play-circle.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/videoEmbed/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));--- modules/video_embed_wysiwyg/js/build/videoEmbed.js
+++ modules/video_embed_wysiwyg/js/build/videoEmbed.js
@@ -1 +1 @@
-!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/videoEmbed/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _videoembed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembed */ "./js/ckeditor5_plugins/videoEmbed/src/videoembed.js");\n\n\n// @todo Remove console.log calls.\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  VideoEmbed: _videoembed__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/index.js?')},"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertVideoEmbedCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertVideoEmbedCommand, which is executed when the videoEmbed\n * toolbar button is pressed.\n */\n\n\n\nclass InsertVideoEmbedCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute(attributes) {\n    console.log('command execution');\n    console.log(attributes);\n    const {model} = this.editor;\n\n    model.change((writer) => {\n      // Insert <videoEmbed *></videoEmbed> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createVideoEmbed(writer, attributes));\n    });\n  }\n\n  refresh() {\n    const {model} = this.editor;\n    const {selection} = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // videoEmbed is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n        selection.getFirstPosition(),\n        'videoEmbed',\n    );\n\n    // If the cursor is not in a location where a videoEmbed can be added,\n    // return null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createVideoEmbed(writer, attributes) {\n  // Create instances of the element registered with the editor in\n  // videoembedediting.js.\n  const videoEmbed = writer.createElement('videoEmbed', attributes);\nconsole.log('createVideoEmbed');\nconsole.log(videoEmbed);\n\n  // Return the element to be added to the editor.\n  return videoEmbed;\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembed.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ VideoEmbed)\n/* harmony export */ });\n/* harmony import */ var _videoembedediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembedediting */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js");\n/* harmony import */ var _videoembedui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./videoembedui */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n\n\n\n\nclass VideoEmbed extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n\nstatic get requires() {\n    return [_videoembedediting__WEBPACK_IMPORTED_MODULE_0__["default"], _videoembedui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembed.js?')},"./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertvideoembedcommand */ \"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js\");\n\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with videoEmbed as this model:\n * <videoEmbed videoUrl=\"https://some.video.url\" responsive=\"trueorfalse\"\n * width=\"42\" height=\"42\" autoplay=\"trueorfalse\"\n * previewThumbnail=\"/some/image/path.jpg\" settingsSummary=\"Some help\n * text.\"></videoEmbed>\n *\n * Which is converted in database (dataDowncast) as this \"text\":\n * {\"preview_thumbnail\":\"/some/image/path.jpg\",\n * \"video_url\":\"https://some.video.url\",\"settings\":{\"responsive\":0or1,\"width\":\"42\",\"height\":\"42\",\"autoplay\":0or1}\",\n * settings_summary\":[\"Some help text.\"]}\n *\n * The Drupal video_embed_wysiwyg format filter will then convert this into a\n * real HTML video embed, on PHP frontend rendering.\n *\n * videoEmbed model elements are also converted to HTML for preview in CKE5 UI\n * (editingDowncast).\n *\n * And the database markup can be converted back to model (upcast).\n *\n * This file has the logic for defining the videoEmbed model, and for how it is\n * converted from/to standard DOM markup for database/UI.\n */\nclass VideoEmbedEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n        'insertVideoEmbed',\n        new _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <videoEmbed *></videoEmbed>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n\n    schema.register('videoEmbed', {\n      inheritAllFrom: '$blockObject',\n      allowAttributes: ['videoUrl', 'responsive', 'width', 'height', 'autoplay', 'previewThumbnail', 'settingsSummary']\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const {conversion} = this.editor;\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If {\"preview_thumbnail\":......} is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <videoEmbed> model.\n    // @todo Implement this, see video_embed_wysiwyg/plugin/plugin.js\n    //conversion.for('upcast').[...]\n\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <videoEmbed> are saved as\n    // {\"preview_thumbnail\":......}.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'videoEmbed',\n      view: (modelElement, {writer}) => {\n        const data = {};\n        data.preview_thumbnail = modelElement.getAttribute('previewThumbnail');\n        data.video_url = modelElement.getAttribute('videoUrl');\n        data.settings = {};\n        ['responsive', 'width', 'height', 'autoplay'].forEach(function (attributeName) {\n          data.settings[attributeName] = modelElement.getAttribute(attributeName);\n        });\n        data.settings_summary = [modelElement.getAttribute('settingsSummary')];\n        return writer.createText(JSON.stringify(data));\n      }\n    });\n\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <videoEmbed> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n          model: 'videoEmbed',\n          view: (modelElement, {writer}) => {\n            const preview = writer.createContainerElement('span', {class: 'video-embed-widget'}, [\n              writer.createEmptyElement('img', {\n                class: 'video-embed-widget__image',\n                src: modelElement.getAttribute('previewThumbnail')\n              }),\n              writer.createContainerElement('span', {class: 'video-embed-widget__summary'}, [\n                writer.createText(modelElement.getAttribute('settingsSummary'))\n              ])\n            ]);\n\n            return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(preview, writer, {label: Drupal.t('Video Embed')});\n          }\n        }\n    );\n  }\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../icons/play-circle.svg */ \"./icons/play-circle.svg\");\n/**\n * @file registers the videoEmbed toolbar button and binds functionality to it.\n */\n\n\n\n\n/* @todo Choose the best icon and remove others. */\n\n\nclass VideoEmbedUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n\n    // This will register the videoEmbed toolbar button.\n    editor.ui.componentFactory.add('videoEmbed', (locale) => {\n      const command = editor.commands.get('insertVideoEmbed');\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Video Embed'),\n        icon: _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () => {\n            console.log('button execution');\n            this.openEditingDialog();\n          }\n      );\n\n      return buttonView;\n    });\n  }\n\n  /**\n   * Opens video embed form when the editing button is clicked.\n   */\n  openEditingDialog() {\n    console.log('dialog opening');\n    const {editor} = this;\n\n    // If the selected element while we click the button is an instance\n    // of the video_embed widget, extract its values so they can be\n    // sent to the server to prime the configuration form.\n    let existingValues = {settings: {}};\n    const selectedVideoEmbedElement = this._getSelectedVideoEmbedElement()\n    if (selectedVideoEmbedElement) {\n      // @todo ensure this is the right way to implement this (ensure the\n      // element is indeed a model one, not a view one).\n      if (selectedVideoEmbedElement.hasAttribute('videoUrl')) {\n        existingValues.video_url = selectedVideoEmbedElement.getAttribute('videoUrl');\n      }\n      ['responsive', 'width', 'height', 'autoplay'].foreach(function (attributeName) {\n        if (selectedVideoEmbedElement.hasAttribute(attributeName)) {\n          existingValues.settings.attributeName = selectedVideoEmbedElement.getAttribute(attributeName);\n        }\n      });\n    }\n    console.log('calling this._openDialog');\n    this._openDialog(\n        Drupal.url('video-embed-wysiwyg/dialog/' + editor.config.get('videoEmbed').format),\n        existingValues,\n        (newValues) => {\n\n          const attributes = {\n            videoUrl: newValues.video_url,\n            responsive: newValues.settings.responsive,\n            width: newValues.settings.width,\n            height: newValues.settings.height,\n            autoplay: newValues.settings.autoplay,\n            // These attributes are useful only for editor preview, but are\n            // keeped on dataDowncast so that they can be retrieved on later\n            // upcast+editingDowncast.\n            settingsSummary: newValues.settings_summary[0],\n            previewThumbnail: newValues.preview_thumbnail,\n          }\n          console.log('attributes:');\n          console.log(attributes);\n          editor.execute('insertVideoEmbed', attributes);\n        },\n        {\n          title: Drupal.t('Video Embed'),\n          dialogClass: 'video-embed-dialog'\n        }\n    );\n  }\n\n  /**\n   * @todo Return the focused videoEmbed element (the cke5 widget system may\n   * help with that).\n   *\n   * @private\n   */\n  _getSelectedVideoEmbedElement() {\n    return null;\n  }\n\n  /**\n   * This method is adapted from drupal's ckeditor5.js file due to an issue\n   * where the \"editor_object\" isn't passed to the ajax request.\n   *\n   * See https://www.drupal.org/project/drupal/issues/3303191\n   *\n   * @param {string} url\n   *   The URL that contains the contents of the dialog.\n   * @param {object} existingValues\n   *   Existing values that will be sent via POST to the url for the dialog\n   *   contents.\n   * @param {function} saveCallback\n   *   A function to be called upon saving the dialog.\n   * @param {object} dialogSettings\n   *   An object containing settings to be passed to the jQuery UI.\n   */\n  _openDialog(url, existingValues, saveCallback, dialogSettings = {}) {\n    console.log('_openDialog');\n    // Add a consistent dialog class.\n    const classes = dialogSettings.dialogClass\n        ? dialogSettings.dialogClass.split(' ')\n        : [];\n    classes.push('ui-dialog--narrow');\n    dialogSettings.dialogClass = classes.join(' ');\n    dialogSettings.autoResize =\n        window.matchMedia('(min-width: 600px)').matches;\n    dialogSettings.width = 'auto';\n\n    const ckeditorAjaxDialog = Drupal.ajax({\n      dialog: dialogSettings,\n      dialogType: 'modal',\n      selector: '.ckeditor5-dialog-loading-link',\n      url,\n      progress: {type: 'fullscreen'},\n      submit: {\n        editor_object: existingValues,\n      },\n    });\n    console.log('ckeditorAjaxDialog.execute()');\n    ckeditorAjaxDialog.execute();\n\n    // Store the save callback to be executed when this dialog is closed.\n    console.log('storing the right callback');\n    Drupal.ckeditor5.saveCallback = saveCallback;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js?")},"./icons/play-circle.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d=\\"M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./icons/play-circle.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/videoEmbed/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));+!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/videoEmbed/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _videoembed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembed */ "./js/ckeditor5_plugins/videoEmbed/src/videoembed.js");\n\n\n// @todo Remove console.log calls.\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  VideoEmbed: _videoembed__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/index.js?')},"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertVideoEmbedCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertVideoEmbedCommand, which is executed when the videoEmbed\n * toolbar button is pressed.\n */\n\n\n\nclass InsertVideoEmbedCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute(attributes) {\n    console.log('command execution');\n    console.log(attributes);\n    const {model} = this.editor;\n\n    model.change((writer) => {\n      // Insert <videoEmbed *></videoEmbed> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createVideoEmbed(writer, attributes));\n    });\n  }\n\n  refresh() {\n    const {model} = this.editor;\n    const {selection} = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // videoEmbed is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n        selection.getFirstPosition(),\n        'videoEmbed',\n    );\n\n    // If the cursor is not in a location where a videoEmbed can be added,\n    // return null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createVideoEmbed(writer, attributes) {\n  // Create instances of the element registered with the editor in\n  // videoembedediting.js.\n  const videoEmbed = writer.createElement('videoEmbed', attributes);\nconsole.log('createVideoEmbed');\nconsole.log(videoEmbed);\n\n  // Return the element to be added to the editor.\n  return videoEmbed;\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembed.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ VideoEmbed)\n/* harmony export */ });\n/* harmony import */ var _videoembedediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembedediting */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js");\n/* harmony import */ var _videoembedui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./videoembedui */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n\n\n\n\nclass VideoEmbed extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n\nstatic get requires() {\n    return [_videoembedediting__WEBPACK_IMPORTED_MODULE_0__["default"], _videoembedui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembed.js?')},"./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertvideoembedcommand */ \"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js\");\n\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with videoEmbed as this model:\n * <videoEmbed videoUrl=\"https://some.video.url\" responsive=\"trueorfalse\"\n * width=\"42\" height=\"42\" autoplay=\"trueorfalse\"\n * previewThumbnail=\"/some/image/path.jpg\" settingsSummary=\"Some help\n * text.\"></videoEmbed>\n *\n * Which is converted in database (dataDowncast) as this:\n * <p>{\"preview_thumbnail\":\"/some/image/path.jpg\",\n * \"video_url\":\"https://some.video.url\",\"settings\":{\"responsive\":0or1,\"width\":\"42\",\"height\":\"42\",\"autoplay\":0or1}\",\n * settings_summary\":[\"Some help text.\"]}</p>\n *\n * The Drupal video_embed_wysiwyg format filter will then convert this into a\n * real HTML video embed, on PHP frontend rendering.\n *\n * videoEmbed model elements are also converted to HTML for preview in CKE5 UI\n * (editingDowncast).\n *\n * And the database markup can be converted back to model (upcast).\n *\n * This file has the logic for defining the videoEmbed model, and for how it is\n * converted from/to standard DOM markup for database/UI.\n */\nclass VideoEmbedEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n        'insertVideoEmbed',\n        new _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <videoEmbed *></videoEmbed>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n\n    schema.register('videoEmbed', {\n      inheritAllFrom: '$blockObject',\n      allowAttributes: ['videoUrl', 'responsive', 'width', 'height', 'autoplay', 'previewThumbnail', 'settingsSummary']\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const {conversion} = this.editor;\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If <p>{\"preview_thumbnail\":......}</p> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <videoEmbed> model.\n\n    const pattern = function (element) {\n      if (element.name === 'p') {\n        if (element.getChild(0).is('text')) {\n          // @todo debug this:\n          let text = element.getChild(0).data;\n          console.log('text:');console.log(text);\n          if (text.match(/^({(?=.*preview_thumbnail\\b)(?=.*settings\\b)(?=.*video_url\\b)(?=.*settings_summary)(.*)})$/)) {\n            console.log('data:');console.log(data);\n            return {name: true};\n          }\n        }\n      }\n\n      return null;\n    };\n\n    conversion.for('upcast').elementToElement({\n      view: pattern,\n      // @todo convert json text to model attributes\n      model: 'videoEmbed',\n      // Avoid it's converted to a normal paragraph.\n      converterPriority: 'high'\n    });\n\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <videoEmbed> are saved as\n    // <p>{\"preview_thumbnail\":......}</p>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'videoEmbed',\n      view: (modelElement, {writer}) => {\n        const data = {};\n        data.preview_thumbnail = modelElement.getAttribute('previewThumbnail');\n        data.video_url = modelElement.getAttribute('videoUrl');\n        data.settings = {};\n        ['responsive', 'width', 'height', 'autoplay'].forEach(function (attributeName) {\n          data.settings[attributeName] = modelElement.getAttribute(attributeName);\n        });\n        data.settings_summary = [modelElement.getAttribute('settingsSummary')];\n        let p = writer.createElement('paragraph');\n        writer.insertText(JSON.stringify(data), p);\n        return p;\n      }\n    });\n\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <videoEmbed> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n          model: 'videoEmbed',\n          view: (modelElement, {writer}) => {\n            const preview = writer.createContainerElement('span', {class: 'video-embed-widget'}, [\n              writer.createEmptyElement('img', {\n                class: 'video-embed-widget__image',\n                src: modelElement.getAttribute('previewThumbnail')\n              }),\n              writer.createContainerElement('span', {class: 'video-embed-widget__summary'}, [\n                writer.createText(modelElement.getAttribute('settingsSummary'))\n              ])\n            ]);\n\n            return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(preview, writer, {label: Drupal.t('Video Embed')});\n          }\n        }\n    );\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../icons/play-circle.svg */ \"./icons/play-circle.svg\");\n/**\n * @file registers the videoEmbed toolbar button and binds functionality to it.\n */\n\n\n\n\n/* @todo Choose the best icon and remove others. */\n\n\nclass VideoEmbedUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n\n    // This will register the videoEmbed toolbar button.\n    editor.ui.componentFactory.add('videoEmbed', (locale) => {\n      const command = editor.commands.get('insertVideoEmbed');\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Video Embed'),\n        icon: _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () => {\n            console.log('button execution');\n            this.openEditingDialog();\n          }\n      );\n\n      return buttonView;\n    });\n  }\n\n  /**\n   * Opens video embed form when the editing button is clicked.\n   */\n  openEditingDialog() {\n    console.log('dialog opening');\n    const {editor} = this;\n\n    // If the selected element while we click the button is an instance\n    // of the video_embed widget, extract its values so they can be\n    // sent to the server to prime the configuration form.\n    let existingValues = {settings: {}};\n    const selectedVideoEmbedElement = this._getSelectedVideoEmbedElement()\n    if (selectedVideoEmbedElement) {\n      // @todo ensure this is the right way to implement this (ensure the\n      // element is indeed a model one, not a view one).\n      if (selectedVideoEmbedElement.hasAttribute('videoUrl')) {\n        existingValues.video_url = selectedVideoEmbedElement.getAttribute('videoUrl');\n      }\n      ['responsive', 'width', 'height', 'autoplay'].foreach(function (attributeName) {\n        if (selectedVideoEmbedElement.hasAttribute(attributeName)) {\n          existingValues.settings.attributeName = selectedVideoEmbedElement.getAttribute(attributeName);\n        }\n      });\n    }\n    console.log('calling this._openDialog');\n    this._openDialog(\n        Drupal.url('video-embed-wysiwyg/dialog/' + editor.config.get('videoEmbed').format),\n        existingValues,\n        (newValues) => {\n\n          const attributes = {\n            videoUrl: newValues.video_url,\n            responsive: newValues.settings.responsive,\n            width: newValues.settings.width,\n            height: newValues.settings.height,\n            autoplay: newValues.settings.autoplay,\n            // These attributes are useful only for editor preview, but are\n            // keeped on dataDowncast so that they can be retrieved on later\n            // upcast+editingDowncast.\n            settingsSummary: newValues.settings_summary[0],\n            previewThumbnail: newValues.preview_thumbnail,\n          }\n          console.log('attributes:');\n          console.log(attributes);\n          editor.execute('insertVideoEmbed', attributes);\n        },\n        {\n          title: Drupal.t('Video Embed'),\n          dialogClass: 'video-embed-dialog'\n        }\n    );\n  }\n\n  /**\n   * @todo Return the focused videoEmbed element (the cke5 widget system may\n   * help with that).\n   *\n   * @private\n   */\n  _getSelectedVideoEmbedElement() {\n    return null;\n  }\n\n  /**\n   * This method is adapted from drupal's ckeditor5.js file due to an issue\n   * where the \"editor_object\" isn't passed to the ajax request.\n   *\n   * See https://www.drupal.org/project/drupal/issues/3303191\n   *\n   * @param {string} url\n   *   The URL that contains the contents of the dialog.\n   * @param {object} existingValues\n   *   Existing values that will be sent via POST to the url for the dialog\n   *   contents.\n   * @param {function} saveCallback\n   *   A function to be called upon saving the dialog.\n   * @param {object} dialogSettings\n   *   An object containing settings to be passed to the jQuery UI.\n   */\n  _openDialog(url, existingValues, saveCallback, dialogSettings = {}) {\n    console.log('_openDialog');\n    // Add a consistent dialog class.\n    const classes = dialogSettings.dialogClass\n        ? dialogSettings.dialogClass.split(' ')\n        : [];\n    classes.push('ui-dialog--narrow');\n    dialogSettings.dialogClass = classes.join(' ');\n    dialogSettings.autoResize =\n        window.matchMedia('(min-width: 600px)').matches;\n    dialogSettings.width = 'auto';\n\n    const ckeditorAjaxDialog = Drupal.ajax({\n      dialog: dialogSettings,\n      dialogType: 'modal',\n      selector: '.ckeditor5-dialog-loading-link',\n      url,\n      progress: {type: 'fullscreen'},\n      submit: {\n        editor_object: existingValues,\n      },\n    });\n    console.log('ckeditorAjaxDialog.execute()');\n    ckeditorAjaxDialog.execute();\n\n    // Store the save callback to be executed when this dialog is closed.\n    console.log('storing the right callback');\n    Drupal.ckeditor5.saveCallback = saveCallback;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js?")},"./icons/play-circle.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d=\\"M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./icons/play-circle.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/videoEmbed/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));--- modules/video_embed_wysiwyg/js/build/videoEmbed.js
+++ modules/video_embed_wysiwyg/js/build/videoEmbed.js
@@ -1 +1 @@
-!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/videoEmbed/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _videoembed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembed */ "./js/ckeditor5_plugins/videoEmbed/src/videoembed.js");\n\n\n// @todo Remove console.log calls.\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  VideoEmbed: _videoembed__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/index.js?')},"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertVideoEmbedCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertVideoEmbedCommand, which is executed when the videoEmbed\n * toolbar button is pressed.\n */\n\n\n\nclass InsertVideoEmbedCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute(attributes) {\n    console.log('command execution');\n    console.log(attributes);\n    const {model} = this.editor;\n\n    model.change((writer) => {\n      // Insert <videoEmbed *></videoEmbed> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createVideoEmbed(writer, attributes));\n    });\n  }\n\n  refresh() {\n    const {model} = this.editor;\n    const {selection} = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // videoEmbed is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n        selection.getFirstPosition(),\n        'videoEmbed',\n    );\n\n    // If the cursor is not in a location where a videoEmbed can be added,\n    // return null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createVideoEmbed(writer, attributes) {\n  // Create instances of the element registered with the editor in\n  // videoembedediting.js.\n  const videoEmbed = writer.createElement('videoEmbed', attributes);\nconsole.log('createVideoEmbed');\nconsole.log(videoEmbed);\n\n  // Return the element to be added to the editor.\n  return videoEmbed;\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembed.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ VideoEmbed)\n/* harmony export */ });\n/* harmony import */ var _videoembedediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembedediting */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js");\n/* harmony import */ var _videoembedui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./videoembedui */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n\n\n\n\nclass VideoEmbed extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n\nstatic get requires() {\n    return [_videoembedediting__WEBPACK_IMPORTED_MODULE_0__["default"], _videoembedui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembed.js?')},"./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertvideoembedcommand */ \"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js\");\n\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with videoEmbed as this model:\n * <videoEmbed videoUrl=\"https://some.video.url\" responsive=\"trueorfalse\"\n * width=\"42\" height=\"42\" autoplay=\"trueorfalse\"\n * previewThumbnail=\"/some/image/path.jpg\" settingsSummary=\"Some help\n * text.\"></videoEmbed>\n *\n * Which is converted in database (dataDowncast) as this:\n * <p>{\"preview_thumbnail\":\"/some/image/path.jpg\",\n * \"video_url\":\"https://some.video.url\",\"settings\":{\"responsive\":0or1,\"width\":\"42\",\"height\":\"42\",\"autoplay\":0or1}\",\n * settings_summary\":[\"Some help text.\"]}</p>\n *\n * The Drupal video_embed_wysiwyg format filter will then convert this into a\n * real HTML video embed, on PHP frontend rendering.\n *\n * videoEmbed model elements are also converted to HTML for preview in CKE5 UI\n * (editingDowncast).\n *\n * And the database markup can be converted back to model (upcast).\n *\n * This file has the logic for defining the videoEmbed model, and for how it is\n * converted from/to standard DOM markup for database/UI.\n */\nclass VideoEmbedEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n        'insertVideoEmbed',\n        new _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <videoEmbed *></videoEmbed>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n\n    schema.register('videoEmbed', {\n      inheritAllFrom: '$blockObject',\n      allowAttributes: ['videoUrl', 'responsive', 'width', 'height', 'autoplay', 'previewThumbnail', 'settingsSummary']\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const {conversion} = this.editor;\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If <p>{\"preview_thumbnail\":......}</p> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <videoEmbed> model.\n\n    const pattern = function (element) {\n      if (element.name === 'p') {\n        if (element.getChild(0).is('text')) {\n          // @todo debug this:\n          let text = element.getChild(0).data;\n          console.log('text:');console.log(text);\n          if (text.match(/^({(?=.*preview_thumbnail\\b)(?=.*settings\\b)(?=.*video_url\\b)(?=.*settings_summary)(.*)})$/)) {\n            console.log('data:');console.log(data);\n            return {name: true};\n          }\n        }\n      }\n\n      return null;\n    };\n\n    conversion.for('upcast').elementToElement({\n      view: pattern,\n      // @todo convert json text to model attributes\n      model: 'videoEmbed',\n      // Avoid it's converted to a normal paragraph.\n      converterPriority: 'high'\n    });\n\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <videoEmbed> are saved as\n    // <p>{\"preview_thumbnail\":......}</p>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'videoEmbed',\n      view: (modelElement, {writer}) => {\n        const data = {};\n        data.preview_thumbnail = modelElement.getAttribute('previewThumbnail');\n        data.video_url = modelElement.getAttribute('videoUrl');\n        data.settings = {};\n        ['responsive', 'width', 'height', 'autoplay'].forEach(function (attributeName) {\n          data.settings[attributeName] = modelElement.getAttribute(attributeName);\n        });\n        data.settings_summary = [modelElement.getAttribute('settingsSummary')];\n        let p = writer.createElement('paragraph');\n        writer.insertText(JSON.stringify(data), p);\n        return p;\n      }\n    });\n\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <videoEmbed> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n          model: 'videoEmbed',\n          view: (modelElement, {writer}) => {\n            const preview = writer.createContainerElement('span', {class: 'video-embed-widget'}, [\n              writer.createEmptyElement('img', {\n                class: 'video-embed-widget__image',\n                src: modelElement.getAttribute('previewThumbnail')\n              }),\n              writer.createContainerElement('span', {class: 'video-embed-widget__summary'}, [\n                writer.createText(modelElement.getAttribute('settingsSummary'))\n              ])\n            ]);\n\n            return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(preview, writer, {label: Drupal.t('Video Embed')});\n          }\n        }\n    );\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../icons/play-circle.svg */ \"./icons/play-circle.svg\");\n/**\n * @file registers the videoEmbed toolbar button and binds functionality to it.\n */\n\n\n\n\n/* @todo Choose the best icon and remove others. */\n\n\nclass VideoEmbedUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n\n    // This will register the videoEmbed toolbar button.\n    editor.ui.componentFactory.add('videoEmbed', (locale) => {\n      const command = editor.commands.get('insertVideoEmbed');\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Video Embed'),\n        icon: _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () => {\n            console.log('button execution');\n            this.openEditingDialog();\n          }\n      );\n\n      return buttonView;\n    });\n  }\n\n  /**\n   * Opens video embed form when the editing button is clicked.\n   */\n  openEditingDialog() {\n    console.log('dialog opening');\n    const {editor} = this;\n\n    // If the selected element while we click the button is an instance\n    // of the video_embed widget, extract its values so they can be\n    // sent to the server to prime the configuration form.\n    let existingValues = {settings: {}};\n    const selectedVideoEmbedElement = this._getSelectedVideoEmbedElement()\n    if (selectedVideoEmbedElement) {\n      // @todo ensure this is the right way to implement this (ensure the\n      // element is indeed a model one, not a view one).\n      if (selectedVideoEmbedElement.hasAttribute('videoUrl')) {\n        existingValues.video_url = selectedVideoEmbedElement.getAttribute('videoUrl');\n      }\n      ['responsive', 'width', 'height', 'autoplay'].foreach(function (attributeName) {\n        if (selectedVideoEmbedElement.hasAttribute(attributeName)) {\n          existingValues.settings.attributeName = selectedVideoEmbedElement.getAttribute(attributeName);\n        }\n      });\n    }\n    console.log('calling this._openDialog');\n    this._openDialog(\n        Drupal.url('video-embed-wysiwyg/dialog/' + editor.config.get('videoEmbed').format),\n        existingValues,\n        (newValues) => {\n\n          const attributes = {\n            videoUrl: newValues.video_url,\n            responsive: newValues.settings.responsive,\n            width: newValues.settings.width,\n            height: newValues.settings.height,\n            autoplay: newValues.settings.autoplay,\n            // These attributes are useful only for editor preview, but are\n            // keeped on dataDowncast so that they can be retrieved on later\n            // upcast+editingDowncast.\n            settingsSummary: newValues.settings_summary[0],\n            previewThumbnail: newValues.preview_thumbnail,\n          }\n          console.log('attributes:');\n          console.log(attributes);\n          editor.execute('insertVideoEmbed', attributes);\n        },\n        {\n          title: Drupal.t('Video Embed'),\n          dialogClass: 'video-embed-dialog'\n        }\n    );\n  }\n\n  /**\n   * @todo Return the focused videoEmbed element (the cke5 widget system may\n   * help with that).\n   *\n   * @private\n   */\n  _getSelectedVideoEmbedElement() {\n    return null;\n  }\n\n  /**\n   * This method is adapted from drupal's ckeditor5.js file due to an issue\n   * where the \"editor_object\" isn't passed to the ajax request.\n   *\n   * See https://www.drupal.org/project/drupal/issues/3303191\n   *\n   * @param {string} url\n   *   The URL that contains the contents of the dialog.\n   * @param {object} existingValues\n   *   Existing values that will be sent via POST to the url for the dialog\n   *   contents.\n   * @param {function} saveCallback\n   *   A function to be called upon saving the dialog.\n   * @param {object} dialogSettings\n   *   An object containing settings to be passed to the jQuery UI.\n   */\n  _openDialog(url, existingValues, saveCallback, dialogSettings = {}) {\n    console.log('_openDialog');\n    // Add a consistent dialog class.\n    const classes = dialogSettings.dialogClass\n        ? dialogSettings.dialogClass.split(' ')\n        : [];\n    classes.push('ui-dialog--narrow');\n    dialogSettings.dialogClass = classes.join(' ');\n    dialogSettings.autoResize =\n        window.matchMedia('(min-width: 600px)').matches;\n    dialogSettings.width = 'auto';\n\n    const ckeditorAjaxDialog = Drupal.ajax({\n      dialog: dialogSettings,\n      dialogType: 'modal',\n      selector: '.ckeditor5-dialog-loading-link',\n      url,\n      progress: {type: 'fullscreen'},\n      submit: {\n        editor_object: existingValues,\n      },\n    });\n    console.log('ckeditorAjaxDialog.execute()');\n    ckeditorAjaxDialog.execute();\n\n    // Store the save callback to be executed when this dialog is closed.\n    console.log('storing the right callback');\n    Drupal.ckeditor5.saveCallback = saveCallback;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js?")},"./icons/play-circle.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d=\\"M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./icons/play-circle.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/videoEmbed/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));+!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/videoEmbed/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _videoembed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembed */ "./js/ckeditor5_plugins/videoEmbed/src/videoembed.js");\n\n\n// @todo Remove console.log calls.\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  VideoEmbed: _videoembed__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/index.js?')},"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertVideoEmbedCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertVideoEmbedCommand, which is executed when the videoEmbed\n * toolbar button is pressed.\n */\n\n\n\nclass InsertVideoEmbedCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute(attributes) {\n    console.log('command execution');\n    console.log(attributes);\n    const {model} = this.editor;\n\n    model.change((writer) => {\n      // Insert <videoEmbed *></videoEmbed> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createVideoEmbed(writer, attributes));\n    });\n  }\n\n  refresh() {\n    const {model} = this.editor;\n    const {selection} = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // videoEmbed is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n        selection.getFirstPosition(),\n        'videoEmbed',\n    );\n\n    // If the cursor is not in a location where a videoEmbed can be added,\n    // return null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createVideoEmbed(writer, attributes) {\n  // Create instances of the element registered with the editor in\n  // videoembedediting.js.\n  const videoEmbed = writer.createElement('videoEmbed', attributes);\nconsole.log('createVideoEmbed');\nconsole.log(videoEmbed);\n\n  // Return the element to be added to the editor.\n  return videoEmbed;\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembed.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ VideoEmbed)\n/* harmony export */ });\n/* harmony import */ var _videoembedediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembedediting */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js");\n/* harmony import */ var _videoembedui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./videoembedui */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n\n\n\n\nclass VideoEmbed extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n\nstatic get requires() {\n    return [_videoembedediting__WEBPACK_IMPORTED_MODULE_0__["default"], _videoembedui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembed.js?')},"./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertvideoembedcommand */ \"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js\");\n\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with videoEmbed as this model:\n * <videoEmbed videoUrl=\"https://some.video.url\" responsive=\"trueorfalse\"\n * width=\"42\" height=\"42\" autoplay=\"trueorfalse\"\n * previewThumbnail=\"/some/image/path.jpg\" settingsSummary=\"Some help\n * text.\"></videoEmbed>\n *\n * Which is converted in database (dataDowncast) as this:\n * <p>{\"preview_thumbnail\":\"/some/image/path.jpg\",\n * \"video_url\":\"https://some.video.url\",\"settings\":{\"responsive\":0or1,\"width\":\"42\",\"height\":\"42\",\"autoplay\":0or1}\",\n * settings_summary\":[\"Some help text.\"]}</p>\n *\n * The Drupal video_embed_wysiwyg format filter will then convert this into a\n * real HTML video embed, on PHP frontend rendering.\n *\n * videoEmbed model elements are also converted to HTML for preview in CKE5 UI\n * (editingDowncast).\n *\n * And the database markup can be converted back to model (upcast).\n *\n * This file has the logic for defining the videoEmbed model, and for how it is\n * converted from/to standard DOM markup for database/UI.\n */\nclass VideoEmbedEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n        'insertVideoEmbed',\n        new _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <videoEmbed *></videoEmbed>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n\n    schema.register('videoEmbed', {\n      inheritAllFrom: '$blockObject',\n      allowAttributes: ['videoUrl', 'responsive', 'width', 'height', 'autoplay', 'previewThumbnail', 'settingsSummary']\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const {conversion} = this.editor;\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If <p>{\"preview_thumbnail\":......}</p> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <videoEmbed> model.\n    // @todo debug error in console at upcast (it works if I remove upcast\n    //  conversion).\n    // @see https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_conversion_conversion-ConverterDefinition.html\n    conversion.for('upcast').elementToElement({\n      view: function (element) {\n        if (element.name === 'p') {\n          if (element.getChild(0).is('text')) {\n            let text = element.getChild(0).data;\n            if (text.match(/^({(?=.*preview_thumbnail\\b)(?=.*settings\\b)(?=.*video_url\\b)(?=.*settings_summary)(.*)})$/)) {\n              return {name: true};\n            }\n          }\n        }\n        return null;\n      },\n      model: (viewElement, {writer}) => {\n        let data = JSON.parse(viewElement.getChild(0).data);\n        return writer.createElement('videoEmbed',\n            {\n              'videoUrl': data.video_url,\n              'responsive': !!data.settings.responsive,\n              'width': data.settings.width,\n              'height': data.settings.height,\n              'autoplay': !!data.settings.autoplay,\n              'previewThumbnail': data.preview_thumbnail,\n              'settingsSummary': data.settings_summary,\n            });\n      },\n      // Avoid it's converted to a normal paragraph.\n      converterPriority: 'high'\n    });\n\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <videoEmbed> are saved as\n    // <p>{\"preview_thumbnail\":......}</p>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'videoEmbed',\n      view: (modelElement, {writer}) => {\n        const data = {};\n        data.preview_thumbnail = modelElement.getAttribute('previewThumbnail');\n        data.video_url = modelElement.getAttribute('videoUrl');\n        data.settings = {};\n        ['responsive', 'width', 'height', 'autoplay'].forEach(function (attributeName) {\n          data.settings[attributeName] = modelElement.getAttribute(attributeName);\n        });\n        data.settings_summary = [modelElement.getAttribute('settingsSummary')];\n        let p = writer.createElement('paragraph');\n        writer.insertText(JSON.stringify(data), p);\n        return p;\n      }\n    });\n\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <videoEmbed> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n          model: 'videoEmbed',\n          view: (modelElement, {writer}) => {\n            const preview = writer.createContainerElement('span', {class: 'video-embed-widget'}, [\n              writer.createEmptyElement('img', {\n                class: 'video-embed-widget__image',\n                src: modelElement.getAttribute('previewThumbnail')\n              }),\n              writer.createContainerElement('span', {class: 'video-embed-widget__summary'}, [\n                writer.createText(modelElement.getAttribute('settingsSummary'))\n              ])\n            ]);\n\n            return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(preview, writer, {label: Drupal.t('Video Embed')});\n          }\n        }\n    );\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../icons/play-circle.svg */ \"./icons/play-circle.svg\");\n/**\n * @file registers the videoEmbed toolbar button and binds functionality to it.\n */\n\n\n\n\n/* @todo Choose the best icon and remove others. */\n\n\nclass VideoEmbedUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n\n    // This will register the videoEmbed toolbar button.\n    editor.ui.componentFactory.add('videoEmbed', (locale) => {\n      const command = editor.commands.get('insertVideoEmbed');\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Video Embed'),\n        icon: _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () => {\n            console.log('button execution');\n            this.openEditingDialog();\n          }\n      );\n\n      return buttonView;\n    });\n  }\n\n  /**\n   * Opens video embed form when the editing button is clicked.\n   */\n  openEditingDialog() {\n    console.log('dialog opening');\n    const {editor} = this;\n\n    // If the selected element while we click the button is an instance\n    // of the video_embed widget, extract its values so they can be\n    // sent to the server to prime the configuration form.\n    let existingValues = {settings: {}};\n    const selectedVideoEmbedElement = this._getSelectedVideoEmbedElement()\n    if (selectedVideoEmbedElement) {\n      // @todo ensure this is the right way to implement this (ensure the\n      // element is indeed a model one, not a view one).\n      if (selectedVideoEmbedElement.hasAttribute('videoUrl')) {\n        existingValues.video_url = selectedVideoEmbedElement.getAttribute('videoUrl');\n      }\n      ['responsive', 'width', 'height', 'autoplay'].foreach(function (attributeName) {\n        if (selectedVideoEmbedElement.hasAttribute(attributeName)) {\n          existingValues.settings.attributeName = selectedVideoEmbedElement.getAttribute(attributeName);\n        }\n      });\n    }\n    console.log('calling this._openDialog');\n    this._openDialog(\n        Drupal.url('video-embed-wysiwyg/dialog/' + editor.config.get('videoEmbed').format),\n        existingValues,\n        (newValues) => {\n\n          const attributes = {\n            videoUrl: newValues.video_url,\n            responsive: newValues.settings.responsive,\n            width: newValues.settings.width,\n            height: newValues.settings.height,\n            autoplay: newValues.settings.autoplay,\n            // These attributes are useful only for editor preview, but are\n            // keeped on dataDowncast so that they can be retrieved on later\n            // upcast+editingDowncast.\n            settingsSummary: newValues.settings_summary[0],\n            previewThumbnail: newValues.preview_thumbnail,\n          }\n          console.log('attributes:');\n          console.log(attributes);\n          editor.execute('insertVideoEmbed', attributes);\n        },\n        {\n          title: Drupal.t('Video Embed'),\n          dialogClass: 'video-embed-dialog'\n        }\n    );\n  }\n\n  /**\n   * @todo Return the focused videoEmbed element (the cke5 widget system may\n   * help with that).\n   *\n   * @private\n   */\n  _getSelectedVideoEmbedElement() {\n    return null;\n  }\n\n  /**\n   * This method is adapted from drupal's ckeditor5.js file due to an issue\n   * where the \"editor_object\" isn't passed to the ajax request.\n   *\n   * See https://www.drupal.org/project/drupal/issues/3303191\n   *\n   * @param {string} url\n   *   The URL that contains the contents of the dialog.\n   * @param {object} existingValues\n   *   Existing values that will be sent via POST to the url for the dialog\n   *   contents.\n   * @param {function} saveCallback\n   *   A function to be called upon saving the dialog.\n   * @param {object} dialogSettings\n   *   An object containing settings to be passed to the jQuery UI.\n   */\n  _openDialog(url, existingValues, saveCallback, dialogSettings = {}) {\n    console.log('_openDialog');\n    // Add a consistent dialog class.\n    const classes = dialogSettings.dialogClass\n        ? dialogSettings.dialogClass.split(' ')\n        : [];\n    classes.push('ui-dialog--narrow');\n    dialogSettings.dialogClass = classes.join(' ');\n    dialogSettings.autoResize =\n        window.matchMedia('(min-width: 600px)').matches;\n    dialogSettings.width = 'auto';\n\n    const ckeditorAjaxDialog = Drupal.ajax({\n      dialog: dialogSettings,\n      dialogType: 'modal',\n      selector: '.ckeditor5-dialog-loading-link',\n      url,\n      progress: {type: 'fullscreen'},\n      submit: {\n        editor_object: existingValues,\n      },\n    });\n    console.log('ckeditorAjaxDialog.execute()');\n    ckeditorAjaxDialog.execute();\n\n    // Store the save callback to be executed when this dialog is closed.\n    console.log('storing the right callback');\n    Drupal.ckeditor5.saveCallback = saveCallback;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js?")},"./icons/play-circle.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d=\\"M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./icons/play-circle.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/videoEmbed/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));--- modules/video_embed_wysiwyg/js/build/videoEmbed.js
+++ modules/video_embed_wysiwyg/js/build/videoEmbed.js
@@ -1 +1 @@
-!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/videoEmbed/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _videoembed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembed */ "./js/ckeditor5_plugins/videoEmbed/src/videoembed.js");\n\n\n// @todo Remove console.log calls.\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  VideoEmbed: _videoembed__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/index.js?')},"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertVideoEmbedCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertVideoEmbedCommand, which is executed when the videoEmbed\n * toolbar button is pressed.\n */\n\n\n\nclass InsertVideoEmbedCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute(attributes) {\n    console.log('command execution');\n    console.log(attributes);\n    const {model} = this.editor;\n\n    model.change((writer) => {\n      // Insert <videoEmbed *></videoEmbed> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createVideoEmbed(writer, attributes));\n    });\n  }\n\n  refresh() {\n    const {model} = this.editor;\n    const {selection} = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // videoEmbed is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n        selection.getFirstPosition(),\n        'videoEmbed',\n    );\n\n    // If the cursor is not in a location where a videoEmbed can be added,\n    // return null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createVideoEmbed(writer, attributes) {\n  // Create instances of the element registered with the editor in\n  // videoembedediting.js.\n  const videoEmbed = writer.createElement('videoEmbed', attributes);\nconsole.log('createVideoEmbed');\nconsole.log(videoEmbed);\n\n  // Return the element to be added to the editor.\n  return videoEmbed;\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembed.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ VideoEmbed)\n/* harmony export */ });\n/* harmony import */ var _videoembedediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembedediting */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js");\n/* harmony import */ var _videoembedui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./videoembedui */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n\n\n\n\nclass VideoEmbed extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n\nstatic get requires() {\n    return [_videoembedediting__WEBPACK_IMPORTED_MODULE_0__["default"], _videoembedui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembed.js?')},"./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertvideoembedcommand */ \"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js\");\n\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with videoEmbed as this model:\n * <videoEmbed videoUrl=\"https://some.video.url\" responsive=\"trueorfalse\"\n * width=\"42\" height=\"42\" autoplay=\"trueorfalse\"\n * previewThumbnail=\"/some/image/path.jpg\" settingsSummary=\"Some help\n * text.\"></videoEmbed>\n *\n * Which is converted in database (dataDowncast) as this:\n * <p>{\"preview_thumbnail\":\"/some/image/path.jpg\",\n * \"video_url\":\"https://some.video.url\",\"settings\":{\"responsive\":0or1,\"width\":\"42\",\"height\":\"42\",\"autoplay\":0or1}\",\n * settings_summary\":[\"Some help text.\"]}</p>\n *\n * The Drupal video_embed_wysiwyg format filter will then convert this into a\n * real HTML video embed, on PHP frontend rendering.\n *\n * videoEmbed model elements are also converted to HTML for preview in CKE5 UI\n * (editingDowncast).\n *\n * And the database markup can be converted back to model (upcast).\n *\n * This file has the logic for defining the videoEmbed model, and for how it is\n * converted from/to standard DOM markup for database/UI.\n */\nclass VideoEmbedEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n        'insertVideoEmbed',\n        new _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <videoEmbed *></videoEmbed>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n\n    schema.register('videoEmbed', {\n      inheritAllFrom: '$blockObject',\n      allowAttributes: ['videoUrl', 'responsive', 'width', 'height', 'autoplay', 'previewThumbnail', 'settingsSummary']\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const {conversion} = this.editor;\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If <p>{\"preview_thumbnail\":......}</p> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <videoEmbed> model.\n    // @todo debug error in console at upcast (it works if I remove upcast\n    //  conversion).\n    // @see https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_conversion_conversion-ConverterDefinition.html\n    conversion.for('upcast').elementToElement({\n      view: function (element) {\n        if (element.name === 'p') {\n          if (element.getChild(0).is('text')) {\n            let text = element.getChild(0).data;\n            if (text.match(/^({(?=.*preview_thumbnail\\b)(?=.*settings\\b)(?=.*video_url\\b)(?=.*settings_summary)(.*)})$/)) {\n              return {name: true};\n            }\n          }\n        }\n        return null;\n      },\n      model: (viewElement, {writer}) => {\n        let data = JSON.parse(viewElement.getChild(0).data);\n        return writer.createElement('videoEmbed',\n            {\n              'videoUrl': data.video_url,\n              'responsive': !!data.settings.responsive,\n              'width': data.settings.width,\n              'height': data.settings.height,\n              'autoplay': !!data.settings.autoplay,\n              'previewThumbnail': data.preview_thumbnail,\n              'settingsSummary': data.settings_summary,\n            });\n      },\n      // Avoid it's converted to a normal paragraph.\n      converterPriority: 'high'\n    });\n\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <videoEmbed> are saved as\n    // <p>{\"preview_thumbnail\":......}</p>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'videoEmbed',\n      view: (modelElement, {writer}) => {\n        const data = {};\n        data.preview_thumbnail = modelElement.getAttribute('previewThumbnail');\n        data.video_url = modelElement.getAttribute('videoUrl');\n        data.settings = {};\n        ['responsive', 'width', 'height', 'autoplay'].forEach(function (attributeName) {\n          data.settings[attributeName] = modelElement.getAttribute(attributeName);\n        });\n        data.settings_summary = [modelElement.getAttribute('settingsSummary')];\n        let p = writer.createElement('paragraph');\n        writer.insertText(JSON.stringify(data), p);\n        return p;\n      }\n    });\n\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <videoEmbed> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n          model: 'videoEmbed',\n          view: (modelElement, {writer}) => {\n            const preview = writer.createContainerElement('span', {class: 'video-embed-widget'}, [\n              writer.createEmptyElement('img', {\n                class: 'video-embed-widget__image',\n                src: modelElement.getAttribute('previewThumbnail')\n              }),\n              writer.createContainerElement('span', {class: 'video-embed-widget__summary'}, [\n                writer.createText(modelElement.getAttribute('settingsSummary'))\n              ])\n            ]);\n\n            return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(preview, writer, {label: Drupal.t('Video Embed')});\n          }\n        }\n    );\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../icons/play-circle.svg */ \"./icons/play-circle.svg\");\n/**\n * @file registers the videoEmbed toolbar button and binds functionality to it.\n */\n\n\n\n\n/* @todo Choose the best icon and remove others. */\n\n\nclass VideoEmbedUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n\n    // This will register the videoEmbed toolbar button.\n    editor.ui.componentFactory.add('videoEmbed', (locale) => {\n      const command = editor.commands.get('insertVideoEmbed');\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Video Embed'),\n        icon: _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () => {\n            console.log('button execution');\n            this.openEditingDialog();\n          }\n      );\n\n      return buttonView;\n    });\n  }\n\n  /**\n   * Opens video embed form when the editing button is clicked.\n   */\n  openEditingDialog() {\n    console.log('dialog opening');\n    const {editor} = this;\n\n    // If the selected element while we click the button is an instance\n    // of the video_embed widget, extract its values so they can be\n    // sent to the server to prime the configuration form.\n    let existingValues = {settings: {}};\n    const selectedVideoEmbedElement = this._getSelectedVideoEmbedElement()\n    if (selectedVideoEmbedElement) {\n      // @todo ensure this is the right way to implement this (ensure the\n      // element is indeed a model one, not a view one).\n      if (selectedVideoEmbedElement.hasAttribute('videoUrl')) {\n        existingValues.video_url = selectedVideoEmbedElement.getAttribute('videoUrl');\n      }\n      ['responsive', 'width', 'height', 'autoplay'].foreach(function (attributeName) {\n        if (selectedVideoEmbedElement.hasAttribute(attributeName)) {\n          existingValues.settings.attributeName = selectedVideoEmbedElement.getAttribute(attributeName);\n        }\n      });\n    }\n    console.log('calling this._openDialog');\n    this._openDialog(\n        Drupal.url('video-embed-wysiwyg/dialog/' + editor.config.get('videoEmbed').format),\n        existingValues,\n        (newValues) => {\n\n          const attributes = {\n            videoUrl: newValues.video_url,\n            responsive: newValues.settings.responsive,\n            width: newValues.settings.width,\n            height: newValues.settings.height,\n            autoplay: newValues.settings.autoplay,\n            // These attributes are useful only for editor preview, but are\n            // keeped on dataDowncast so that they can be retrieved on later\n            // upcast+editingDowncast.\n            settingsSummary: newValues.settings_summary[0],\n            previewThumbnail: newValues.preview_thumbnail,\n          }\n          console.log('attributes:');\n          console.log(attributes);\n          editor.execute('insertVideoEmbed', attributes);\n        },\n        {\n          title: Drupal.t('Video Embed'),\n          dialogClass: 'video-embed-dialog'\n        }\n    );\n  }\n\n  /**\n   * @todo Return the focused videoEmbed element (the cke5 widget system may\n   * help with that).\n   *\n   * @private\n   */\n  _getSelectedVideoEmbedElement() {\n    return null;\n  }\n\n  /**\n   * This method is adapted from drupal's ckeditor5.js file due to an issue\n   * where the \"editor_object\" isn't passed to the ajax request.\n   *\n   * See https://www.drupal.org/project/drupal/issues/3303191\n   *\n   * @param {string} url\n   *   The URL that contains the contents of the dialog.\n   * @param {object} existingValues\n   *   Existing values that will be sent via POST to the url for the dialog\n   *   contents.\n   * @param {function} saveCallback\n   *   A function to be called upon saving the dialog.\n   * @param {object} dialogSettings\n   *   An object containing settings to be passed to the jQuery UI.\n   */\n  _openDialog(url, existingValues, saveCallback, dialogSettings = {}) {\n    console.log('_openDialog');\n    // Add a consistent dialog class.\n    const classes = dialogSettings.dialogClass\n        ? dialogSettings.dialogClass.split(' ')\n        : [];\n    classes.push('ui-dialog--narrow');\n    dialogSettings.dialogClass = classes.join(' ');\n    dialogSettings.autoResize =\n        window.matchMedia('(min-width: 600px)').matches;\n    dialogSettings.width = 'auto';\n\n    const ckeditorAjaxDialog = Drupal.ajax({\n      dialog: dialogSettings,\n      dialogType: 'modal',\n      selector: '.ckeditor5-dialog-loading-link',\n      url,\n      progress: {type: 'fullscreen'},\n      submit: {\n        editor_object: existingValues,\n      },\n    });\n    console.log('ckeditorAjaxDialog.execute()');\n    ckeditorAjaxDialog.execute();\n\n    // Store the save callback to be executed when this dialog is closed.\n    console.log('storing the right callback');\n    Drupal.ckeditor5.saveCallback = saveCallback;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js?")},"./icons/play-circle.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d=\\"M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./icons/play-circle.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/videoEmbed/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));+!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/videoEmbed/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _videoembed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembed */ "./js/ckeditor5_plugins/videoEmbed/src/videoembed.js");\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  VideoEmbed: _videoembed__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/index.js?')},"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertVideoEmbedCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertVideoEmbedCommand, which is executed when the videoEmbed\n * toolbar button is pressed.\n */\n\n\n\nclass InsertVideoEmbedCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute(attributes) {\n    const {model} = this.editor;\n\n    model.change((writer) => {\n      // Insert <videoEmbed *></videoEmbed> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createVideoEmbed(writer, attributes));\n    });\n  }\n\n  refresh() {\n    const {model} = this.editor;\n    const {selection} = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // videoEmbed is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n        selection.getFirstPosition(),\n        'videoEmbed',\n    );\n\n    // If the cursor is not in a location where a videoEmbed can be added,\n    // return null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createVideoEmbed(writer, attributes) {\n  // Create instances of the element registered with the editor in\n  // videoembedediting.js.\n  const videoEmbed = writer.createElement('videoEmbed', attributes);\n\n  // Return the element to be added to the editor.\n  return videoEmbed;\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembed.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ VideoEmbed)\n/* harmony export */ });\n/* harmony import */ var _videoembedediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembedediting */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js");\n/* harmony import */ var _videoembedui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./videoembedui */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n\n\n\n\nclass VideoEmbed extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n\nstatic get requires() {\n    return [_videoembedediting__WEBPACK_IMPORTED_MODULE_0__["default"], _videoembedui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembed.js?')},"./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertvideoembedcommand */ \"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js\");\n\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with videoEmbed as this model:\n * <videoEmbed videoUrl=\"https://some.video.url\" responsive=\"trueorfalse\"\n * width=\"42\" height=\"42\" autoplay=\"trueorfalse\"\n * previewThumbnail=\"/some/image/path.jpg\" settingsSummary=\"Some help\n * text.\"></videoEmbed>\n *\n * Which is converted in database (dataDowncast) as this:\n * <p>{\"preview_thumbnail\":\"/some/image/path.jpg\",\n * \"video_url\":\"https://some.video.url\",\"settings\":{\"responsive\":0or1,\"width\":\"42\",\"height\":\"42\",\"autoplay\":0or1}\",\n * settings_summary\":[\"Some help text.\"]}</p>\n *\n * The Drupal video_embed_wysiwyg format filter will then convert this into a\n * real HTML video embed, on PHP frontend rendering.\n *\n * videoEmbed model elements are also converted to HTML for preview in CKE5 UI\n * (editingDowncast).\n *\n * And the database markup can be converted back to model (upcast).\n *\n * This file has the logic for defining the videoEmbed model, and for how it is\n * converted from/to standard DOM markup for database/UI.\n */\nclass VideoEmbedEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n        'insertVideoEmbed',\n        new _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <videoEmbed *></videoEmbed>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n\n    schema.register('videoEmbed', {\n      inheritAllFrom: '$blockObject',\n      allowAttributes: ['videoUrl', 'responsive', 'width', 'height', 'autoplay', 'previewThumbnail', 'settingsSummary']\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const {conversion} = this.editor;\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If <p>{\"preview_thumbnail\":......}</p> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <videoEmbed> model.\n    // @see\n    // https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_conversion_conversion-ConverterDefinition.html\n    conversion.for('upcast').elementToElement({\n      view: function (element) {\n        if (element.name === 'p') {\n          if (element.getChild(0).is('text')) {\n            let text = element.getChild(0).data;\n            if (text.match(/^({(?=.*preview_thumbnail\\b)(?=.*settings\\b)(?=.*video_url\\b)(?=.*settings_summary)(.*)})$/)) {\n              return {name: true};\n            }\n          }\n        }\n        return null;\n      },\n      model: (viewElement, {writer}) => {\n        let data = JSON.parse(viewElement.getChild(0).data);\n        return writer.createElement('videoEmbed',\n            {\n              'videoUrl': data.video_url,\n              'responsive': !!data.settings.responsive,\n              'width': data.settings.width,\n              'height': data.settings.height,\n              'autoplay': !!data.settings.autoplay,\n              'previewThumbnail': data.preview_thumbnail,\n              'settingsSummary': data.settings_summary[0],\n            });\n      },\n      // Avoid it's converted to a normal paragraph.\n      converterPriority: 'high'\n    });\n\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <videoEmbed> are saved as\n    // <p>{\"preview_thumbnail\":......}</p>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'videoEmbed',\n      view: (modelElement, {writer}) => {\n        const data = {};\n        data.preview_thumbnail = modelElement.getAttribute('previewThumbnail');\n        data.video_url = modelElement.getAttribute('videoUrl');\n        data.settings = {};\n        ['responsive', 'width', 'height', 'autoplay'].forEach(function (attributeName) {\n          data.settings[attributeName] = modelElement.getAttribute(attributeName);\n        });\n        data.settings_summary = [modelElement.getAttribute('settingsSummary')];\n        return writer.createContainerElement('p', {}, [writer.createText(JSON.stringify(data))]);\n      }\n    });\n\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <videoEmbed> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n          model: 'videoEmbed',\n          view: (modelElement, {writer}) => {\n            const preview = writer.createContainerElement('span', {class: 'video-embed-widget'}, [\n              writer.createEmptyElement('img', {\n                class: 'video-embed-widget__image',\n                src: modelElement.getAttribute('previewThumbnail')\n              }),\n              writer.createContainerElement('span', {class: 'video-embed-widget__summary'}, [\n                writer.createText(modelElement.getAttribute('settingsSummary'))\n              ])\n            ]);\n            return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(preview, writer, {label: Drupal.t('Video Embed')});\n          }\n        }\n    );\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../icons/play-circle.svg */ \"./icons/play-circle.svg\");\n/**\n * @file registers the videoEmbed toolbar button and binds functionality to it.\n */\n\n\n\n\n/* @todo Choose the best icon and remove others. */\n\n\nclass VideoEmbedUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n\n    // This will register the videoEmbed toolbar button.\n    editor.ui.componentFactory.add('videoEmbed', (locale) => {\n      const command = editor.commands.get('insertVideoEmbed');\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Video Embed'),\n        icon: _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () => {\n            this.openEditingDialog();\n          }\n      );\n\n      return buttonView;\n    });\n  }\n\n  /**\n   * Opens video embed form when the editing button is clicked.\n   */\n  openEditingDialog() {\n    const {editor} = this;\n\n    // If the selected element while we click the button is an instance\n    // of the video_embed widget, extract its values so they can be\n    // sent to the server to prime the configuration form.\n    let existingValues = {settings: {}};\n    const selectedVideoEmbedElement = this._getSelectedVideoEmbedElement()\n    if (selectedVideoEmbedElement) {\n      // @todo ensure this is the right way to implement this (ensure the\n      // element is indeed a model one, not a view one).\n      if (selectedVideoEmbedElement.hasAttribute('videoUrl')) {\n        existingValues.video_url = selectedVideoEmbedElement.getAttribute('videoUrl');\n      }\n      ['responsive', 'width', 'height', 'autoplay'].foreach(function (attributeName) {\n        if (selectedVideoEmbedElement.hasAttribute(attributeName)) {\n          existingValues.settings.attributeName = selectedVideoEmbedElement.getAttribute(attributeName);\n        }\n      });\n    }\n    this._openDialog(\n        Drupal.url('video-embed-wysiwyg/dialog/' + editor.config.get('videoEmbed').format),\n        existingValues,\n        (newValues) => {\n\n          const attributes = {\n            videoUrl: newValues.video_url,\n            responsive: newValues.settings.responsive,\n            width: newValues.settings.width,\n            height: newValues.settings.height,\n            autoplay: newValues.settings.autoplay,\n            // These attributes are useful only for editor preview, but are\n            // keeped on dataDowncast so that they can be retrieved on later\n            // upcast+editingDowncast.\n            settingsSummary: newValues.settings_summary[0],\n            previewThumbnail: newValues.preview_thumbnail,\n          }\n          editor.execute('insertVideoEmbed', attributes);\n        },\n        {\n          title: Drupal.t('Video Embed'),\n          dialogClass: 'video-embed-dialog'\n        }\n    );\n  }\n\n  /**\n   * @todo Return the focused videoEmbed element (the cke5 widget system may\n   * help with that).\n   *\n   * @private\n   */\n  _getSelectedVideoEmbedElement() {\n    return null;\n  }\n\n  /**\n   * This method is adapted from drupal's ckeditor5.js file due to an issue\n   * where the \"editor_object\" isn't passed to the ajax request.\n   *\n   * See https://www.drupal.org/project/drupal/issues/3303191\n   *\n   * @param {string} url\n   *   The URL that contains the contents of the dialog.\n   * @param {object} existingValues\n   *   Existing values that will be sent via POST to the url for the dialog\n   *   contents.\n   * @param {function} saveCallback\n   *   A function to be called upon saving the dialog.\n   * @param {object} dialogSettings\n   *   An object containing settings to be passed to the jQuery UI.\n   */\n  _openDialog(url, existingValues, saveCallback, dialogSettings = {}) {\n    // Add a consistent dialog class.\n    const classes = dialogSettings.dialogClass\n        ? dialogSettings.dialogClass.split(' ')\n        : [];\n    classes.push('ui-dialog--narrow');\n    dialogSettings.dialogClass = classes.join(' ');\n    dialogSettings.autoResize =\n        window.matchMedia('(min-width: 600px)').matches;\n    dialogSettings.width = 'auto';\n\n    const ckeditorAjaxDialog = Drupal.ajax({\n      dialog: dialogSettings,\n      dialogType: 'modal',\n      selector: '.ckeditor5-dialog-loading-link',\n      url,\n      progress: {type: 'fullscreen'},\n      submit: {\n        editor_object: existingValues,\n      },\n    });\n    ckeditorAjaxDialog.execute();\n\n    // Store the save callback to be executed when this dialog is closed.\n    Drupal.ckeditor5.saveCallback = saveCallback;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js?")},"./icons/play-circle.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d=\\"M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./icons/play-circle.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/videoEmbed/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));--- modules/video_embed_wysiwyg/js/build/videoEmbed.js
+++ modules/video_embed_wysiwyg/js/build/videoEmbed.js
@@ -1 +1 @@
-!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/videoEmbed/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _videoembed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembed */ "./js/ckeditor5_plugins/videoEmbed/src/videoembed.js");\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  VideoEmbed: _videoembed__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/index.js?')},"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertVideoEmbedCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertVideoEmbedCommand, which is executed when the videoEmbed\n * toolbar button is pressed.\n */\n\n\n\nclass InsertVideoEmbedCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute(attributes) {\n    const {model} = this.editor;\n\n    model.change((writer) => {\n      // Insert <videoEmbed *></videoEmbed> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createVideoEmbed(writer, attributes));\n    });\n  }\n\n  refresh() {\n    const {model} = this.editor;\n    const {selection} = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // videoEmbed is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n        selection.getFirstPosition(),\n        'videoEmbed',\n    );\n\n    // If the cursor is not in a location where a videoEmbed can be added,\n    // return null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createVideoEmbed(writer, attributes) {\n  // Create instances of the element registered with the editor in\n  // videoembedediting.js.\n  const videoEmbed = writer.createElement('videoEmbed', attributes);\n\n  // Return the element to be added to the editor.\n  return videoEmbed;\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembed.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ VideoEmbed)\n/* harmony export */ });\n/* harmony import */ var _videoembedediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembedediting */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js");\n/* harmony import */ var _videoembedui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./videoembedui */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n\n\n\n\nclass VideoEmbed extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n\nstatic get requires() {\n    return [_videoembedediting__WEBPACK_IMPORTED_MODULE_0__["default"], _videoembedui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembed.js?')},"./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertvideoembedcommand */ \"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js\");\n\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with videoEmbed as this model:\n * <videoEmbed videoUrl=\"https://some.video.url\" responsive=\"trueorfalse\"\n * width=\"42\" height=\"42\" autoplay=\"trueorfalse\"\n * previewThumbnail=\"/some/image/path.jpg\" settingsSummary=\"Some help\n * text.\"></videoEmbed>\n *\n * Which is converted in database (dataDowncast) as this:\n * <p>{\"preview_thumbnail\":\"/some/image/path.jpg\",\n * \"video_url\":\"https://some.video.url\",\"settings\":{\"responsive\":0or1,\"width\":\"42\",\"height\":\"42\",\"autoplay\":0or1}\",\n * settings_summary\":[\"Some help text.\"]}</p>\n *\n * The Drupal video_embed_wysiwyg format filter will then convert this into a\n * real HTML video embed, on PHP frontend rendering.\n *\n * videoEmbed model elements are also converted to HTML for preview in CKE5 UI\n * (editingDowncast).\n *\n * And the database markup can be converted back to model (upcast).\n *\n * This file has the logic for defining the videoEmbed model, and for how it is\n * converted from/to standard DOM markup for database/UI.\n */\nclass VideoEmbedEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n        'insertVideoEmbed',\n        new _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <videoEmbed *></videoEmbed>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n\n    schema.register('videoEmbed', {\n      inheritAllFrom: '$blockObject',\n      allowAttributes: ['videoUrl', 'responsive', 'width', 'height', 'autoplay', 'previewThumbnail', 'settingsSummary']\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const {conversion} = this.editor;\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If <p>{\"preview_thumbnail\":......}</p> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <videoEmbed> model.\n    // @see\n    // https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_conversion_conversion-ConverterDefinition.html\n    conversion.for('upcast').elementToElement({\n      view: function (element) {\n        if (element.name === 'p') {\n          if (element.getChild(0).is('text')) {\n            let text = element.getChild(0).data;\n            if (text.match(/^({(?=.*preview_thumbnail\\b)(?=.*settings\\b)(?=.*video_url\\b)(?=.*settings_summary)(.*)})$/)) {\n              return {name: true};\n            }\n          }\n        }\n        return null;\n      },\n      model: (viewElement, {writer}) => {\n        let data = JSON.parse(viewElement.getChild(0).data);\n        return writer.createElement('videoEmbed',\n            {\n              'videoUrl': data.video_url,\n              'responsive': !!data.settings.responsive,\n              'width': data.settings.width,\n              'height': data.settings.height,\n              'autoplay': !!data.settings.autoplay,\n              'previewThumbnail': data.preview_thumbnail,\n              'settingsSummary': data.settings_summary[0],\n            });\n      },\n      // Avoid it's converted to a normal paragraph.\n      converterPriority: 'high'\n    });\n\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <videoEmbed> are saved as\n    // <p>{\"preview_thumbnail\":......}</p>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'videoEmbed',\n      view: (modelElement, {writer}) => {\n        const data = {};\n        data.preview_thumbnail = modelElement.getAttribute('previewThumbnail');\n        data.video_url = modelElement.getAttribute('videoUrl');\n        data.settings = {};\n        ['responsive', 'width', 'height', 'autoplay'].forEach(function (attributeName) {\n          data.settings[attributeName] = modelElement.getAttribute(attributeName);\n        });\n        data.settings_summary = [modelElement.getAttribute('settingsSummary')];\n        return writer.createContainerElement('p', {}, [writer.createText(JSON.stringify(data))]);\n      }\n    });\n\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <videoEmbed> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n          model: 'videoEmbed',\n          view: (modelElement, {writer}) => {\n            const preview = writer.createContainerElement('span', {class: 'video-embed-widget'}, [\n              writer.createEmptyElement('img', {\n                class: 'video-embed-widget__image',\n                src: modelElement.getAttribute('previewThumbnail')\n              }),\n              writer.createContainerElement('span', {class: 'video-embed-widget__summary'}, [\n                writer.createText(modelElement.getAttribute('settingsSummary'))\n              ])\n            ]);\n            return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(preview, writer, {label: Drupal.t('Video Embed')});\n          }\n        }\n    );\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../icons/play-circle.svg */ \"./icons/play-circle.svg\");\n/**\n * @file registers the videoEmbed toolbar button and binds functionality to it.\n */\n\n\n\n\n/* @todo Choose the best icon and remove others. */\n\n\nclass VideoEmbedUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n\n    // This will register the videoEmbed toolbar button.\n    editor.ui.componentFactory.add('videoEmbed', (locale) => {\n      const command = editor.commands.get('insertVideoEmbed');\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Video Embed'),\n        icon: _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () => {\n            this.openEditingDialog();\n          }\n      );\n\n      return buttonView;\n    });\n  }\n\n  /**\n   * Opens video embed form when the editing button is clicked.\n   */\n  openEditingDialog() {\n    const {editor} = this;\n\n    // If the selected element while we click the button is an instance\n    // of the video_embed widget, extract its values so they can be\n    // sent to the server to prime the configuration form.\n    let existingValues = {settings: {}};\n    const selectedVideoEmbedElement = this._getSelectedVideoEmbedElement()\n    if (selectedVideoEmbedElement) {\n      // @todo ensure this is the right way to implement this (ensure the\n      // element is indeed a model one, not a view one).\n      if (selectedVideoEmbedElement.hasAttribute('videoUrl')) {\n        existingValues.video_url = selectedVideoEmbedElement.getAttribute('videoUrl');\n      }\n      ['responsive', 'width', 'height', 'autoplay'].foreach(function (attributeName) {\n        if (selectedVideoEmbedElement.hasAttribute(attributeName)) {\n          existingValues.settings.attributeName = selectedVideoEmbedElement.getAttribute(attributeName);\n        }\n      });\n    }\n    this._openDialog(\n        Drupal.url('video-embed-wysiwyg/dialog/' + editor.config.get('videoEmbed').format),\n        existingValues,\n        (newValues) => {\n\n          const attributes = {\n            videoUrl: newValues.video_url,\n            responsive: newValues.settings.responsive,\n            width: newValues.settings.width,\n            height: newValues.settings.height,\n            autoplay: newValues.settings.autoplay,\n            // These attributes are useful only for editor preview, but are\n            // keeped on dataDowncast so that they can be retrieved on later\n            // upcast+editingDowncast.\n            settingsSummary: newValues.settings_summary[0],\n            previewThumbnail: newValues.preview_thumbnail,\n          }\n          editor.execute('insertVideoEmbed', attributes);\n        },\n        {\n          title: Drupal.t('Video Embed'),\n          dialogClass: 'video-embed-dialog'\n        }\n    );\n  }\n\n  /**\n   * @todo Return the focused videoEmbed element (the cke5 widget system may\n   * help with that).\n   *\n   * @private\n   */\n  _getSelectedVideoEmbedElement() {\n    return null;\n  }\n\n  /**\n   * This method is adapted from drupal's ckeditor5.js file due to an issue\n   * where the \"editor_object\" isn't passed to the ajax request.\n   *\n   * See https://www.drupal.org/project/drupal/issues/3303191\n   *\n   * @param {string} url\n   *   The URL that contains the contents of the dialog.\n   * @param {object} existingValues\n   *   Existing values that will be sent via POST to the url for the dialog\n   *   contents.\n   * @param {function} saveCallback\n   *   A function to be called upon saving the dialog.\n   * @param {object} dialogSettings\n   *   An object containing settings to be passed to the jQuery UI.\n   */\n  _openDialog(url, existingValues, saveCallback, dialogSettings = {}) {\n    // Add a consistent dialog class.\n    const classes = dialogSettings.dialogClass\n        ? dialogSettings.dialogClass.split(' ')\n        : [];\n    classes.push('ui-dialog--narrow');\n    dialogSettings.dialogClass = classes.join(' ');\n    dialogSettings.autoResize =\n        window.matchMedia('(min-width: 600px)').matches;\n    dialogSettings.width = 'auto';\n\n    const ckeditorAjaxDialog = Drupal.ajax({\n      dialog: dialogSettings,\n      dialogType: 'modal',\n      selector: '.ckeditor5-dialog-loading-link',\n      url,\n      progress: {type: 'fullscreen'},\n      submit: {\n        editor_object: existingValues,\n      },\n    });\n    ckeditorAjaxDialog.execute();\n\n    // Store the save callback to be executed when this dialog is closed.\n    Drupal.ckeditor5.saveCallback = saveCallback;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js?")},"./icons/play-circle.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d=\\"M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./icons/play-circle.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/videoEmbed/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));+!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/videoEmbed/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _videoembed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembed */ "./js/ckeditor5_plugins/videoEmbed/src/videoembed.js");\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  VideoEmbed: _videoembed__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/index.js?')},"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertVideoEmbedCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertVideoEmbedCommand, which is executed when the videoEmbed\n * toolbar button is pressed.\n */\n\n\n\nclass InsertVideoEmbedCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute(attributes) {\n    const {model} = this.editor;\n\n    model.change((writer) => {\n      // Insert <videoEmbed *></videoEmbed> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createVideoEmbed(writer, attributes));\n    });\n  }\n\n  refresh() {\n    const {model} = this.editor;\n    const {selection} = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // videoEmbed is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n        selection.getFirstPosition(),\n        'videoEmbed',\n    );\n\n    // If the cursor is not in a location where a videoEmbed can be added,\n    // return null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createVideoEmbed(writer, attributes) {\n  // Create instances of the element registered with the editor in\n  // videoembedediting.js.\n  const videoEmbed = writer.createElement('videoEmbed', attributes);\n\n  // Return the element to be added to the editor.\n  return videoEmbed;\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembed.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ VideoEmbed)\n/* harmony export */ });\n/* harmony import */ var _videoembedediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembedediting */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js");\n/* harmony import */ var _videoembedui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./videoembedui */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n\n\n\n\nclass VideoEmbed extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n\nstatic get requires() {\n    return [_videoembedediting__WEBPACK_IMPORTED_MODULE_0__["default"], _videoembedui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembed.js?')},"./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertvideoembedcommand */ \"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js\");\n\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with videoEmbed as this model:\n * <videoEmbed videoUrl=\"https://some.video.url\" responsive=\"trueorfalse\"\n * width=\"42\" height=\"42\" autoplay=\"trueorfalse\"\n * previewThumbnail=\"/some/image/path.jpg\" settingsSummary=\"Some help\n * text.\"></videoEmbed>\n *\n * Which is converted in database (dataDowncast) as this:\n * <p>{\"preview_thumbnail\":\"/some/image/path.jpg\",\n * \"video_url\":\"https://some.video.url\",\"settings\":{\"responsive\":0or1,\"width\":\"42\",\"height\":\"42\",\"autoplay\":0or1}\",\n * settings_summary\":[\"Some help text.\"]}</p>\n *\n * The Drupal video_embed_wysiwyg format filter will then convert this into a\n * real HTML video embed, on PHP frontend rendering.\n *\n * videoEmbed model elements are also converted to HTML for preview in CKE5 UI\n * (editingDowncast).\n *\n * And the database markup can be converted back to model (upcast).\n *\n * This file has the logic for defining the videoEmbed model, and for how it is\n * converted from/to standard DOM markup for database/UI.\n */\nclass VideoEmbedEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n        'insertVideoEmbed',\n        new _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <videoEmbed *></videoEmbed>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n\n    schema.register('videoEmbed', {\n      inheritAllFrom: '$blockObject',\n      allowAttributes: ['videoUrl', 'responsive', 'width', 'height', 'autoplay', 'previewThumbnail', 'settingsSummary']\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const {conversion} = this.editor;\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If <p>{\"preview_thumbnail\":......}</p> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <videoEmbed> model.\n    // @see\n    // https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_conversion_conversion-ConverterDefinition.html\n    conversion.for('upcast').elementToElement({\n      view: function (element) {\n        if (element.name === 'p') {\n          if (element.getChild(0).is('text')) {\n            let text = element.getChild(0).data;\n            if (text.match(/^({(?=.*preview_thumbnail\\b)(?=.*settings\\b)(?=.*video_url\\b)(?=.*settings_summary)(.*)})$/)) {\n              return {name: true};\n            }\n          }\n        }\n        return null;\n      },\n      model: (viewElement, {writer}) => {\n        let data = JSON.parse(viewElement.getChild(0).data);\n        return writer.createElement('videoEmbed',\n            {\n              'videoUrl': data.video_url,\n              'responsive': !!data.settings.responsive,\n              'width': data.settings.width,\n              'height': data.settings.height,\n              'autoplay': !!data.settings.autoplay,\n              'previewThumbnail': data.preview_thumbnail,\n              'settingsSummary': data.settings_summary[0],\n            });\n      },\n      // Avoid it's converted to a normal paragraph.\n      converterPriority: 'high'\n    });\n\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <videoEmbed> are saved as\n    // <p>{\"preview_thumbnail\":......}</p>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'videoEmbed',\n      view: (modelElement, {writer}) => {\n        const data = {};\n        data.preview_thumbnail = modelElement.getAttribute('previewThumbnail');\n        data.video_url = modelElement.getAttribute('videoUrl');\n        data.settings = {};\n        ['responsive', 'width', 'height', 'autoplay'].forEach(function (attributeName) {\n          data.settings[attributeName] = modelElement.getAttribute(attributeName);\n        });\n        data.settings_summary = [modelElement.getAttribute('settingsSummary')];\n        return writer.createContainerElement('p', {}, [writer.createText(JSON.stringify(data))]);\n      }\n    });\n\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <videoEmbed> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n          model: 'videoEmbed',\n          view: (modelElement, {writer}) => {\n            const preview = writer.createContainerElement('span', {class: 'video-embed-widget'}, [\n              writer.createEmptyElement('img', {\n                class: 'video-embed-widget__image',\n                src: modelElement.getAttribute('previewThumbnail')\n              }),\n              writer.createContainerElement('span', {class: 'video-embed-widget__summary'}, [\n                writer.createText(modelElement.getAttribute('settingsSummary'))\n              ])\n            ]);\n            return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(preview, writer, {label: Drupal.t('Video Embed')});\n          }\n        }\n    );\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../icons/play-circle.svg */ \"./icons/play-circle.svg\");\n/**\n * @file registers the videoEmbed toolbar button and binds functionality to it.\n */\n\n\n\n\n/* @todo Choose the best icon and remove others. */\n\n\nclass VideoEmbedUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n\n    // This will register the videoEmbed toolbar button.\n    editor.ui.componentFactory.add('videoEmbed', (locale) => {\n      const command = editor.commands.get('insertVideoEmbed');\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Video Embed'),\n        icon: _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () => {\n            this.openEditingDialog();\n          }\n      );\n\n      return buttonView;\n    });\n  }\n\n  /**\n   * Opens video embed form when the editing button is clicked.\n   */\n  openEditingDialog() {\n    const {editor} = this;\n\n    // If the selected element while we click the button is an instance\n    // of the video_embed widget, extract its values so they can be\n    // sent to the server to prime the configuration form.\n    let existingValues = {settings: {}};\n    const selectedVideoEmbedElement = editor.model.document.selection.getSelectedElement();\n    if (selectedVideoEmbedElement) {\n      if (selectedVideoEmbedElement.hasAttribute('videoUrl')) {\n        existingValues.video_url = selectedVideoEmbedElement.getAttribute('videoUrl');\n      }\n      ['responsive', 'width', 'height', 'autoplay'].forEach(function (attributeName) {\n        if (selectedVideoEmbedElement.hasAttribute(attributeName)) {\n          existingValues.settings[attributeName] = selectedVideoEmbedElement.getAttribute(attributeName);\n        }\n      });\n    }\n    this._openDialog(\n        Drupal.url('video-embed-wysiwyg/dialog/' + editor.config.get('videoEmbed').format),\n        existingValues,\n        (newValues) => {\n\n          const attributes = {\n            videoUrl: newValues.video_url,\n            responsive: newValues.settings.responsive,\n            width: newValues.settings.width,\n            height: newValues.settings.height,\n            autoplay: newValues.settings.autoplay,\n            // These attributes are useful only for editor preview, but are\n            // keeped on dataDowncast so that they can be retrieved on later\n            // upcast+editingDowncast.\n            settingsSummary: newValues.settings_summary[0],\n            previewThumbnail: newValues.preview_thumbnail,\n          }\n          editor.execute('insertVideoEmbed', attributes);\n        },\n        {\n          title: Drupal.t('Video Embed'),\n          dialogClass: 'video-embed-dialog'\n        }\n    );\n  }\n\n  /**\n   * This method is adapted from drupal's ckeditor5.js file due to an issue\n   * where the \"editor_object\" isn't passed to the ajax request.\n   *\n   * See https://www.drupal.org/project/drupal/issues/3303191\n   *\n   * @param {string} url\n   *   The URL that contains the contents of the dialog.\n   * @param {object} existingValues\n   *   Existing values that will be sent via POST to the url for the dialog\n   *   contents.\n   * @param {function} saveCallback\n   *   A function to be called upon saving the dialog.\n   * @param {object} dialogSettings\n   *   An object containing settings to be passed to the jQuery UI.\n   */\n  _openDialog(url, existingValues, saveCallback, dialogSettings = {}) {\n    // Add a consistent dialog class.\n    const classes = dialogSettings.dialogClass\n        ? dialogSettings.dialogClass.split(' ')\n        : [];\n    classes.push('ui-dialog--narrow');\n    dialogSettings.dialogClass = classes.join(' ');\n    dialogSettings.autoResize =\n        window.matchMedia('(min-width: 600px)').matches;\n    dialogSettings.width = 'auto';\n\n    const ckeditorAjaxDialog = Drupal.ajax({\n      dialog: dialogSettings,\n      dialogType: 'modal',\n      selector: '.ckeditor5-dialog-loading-link',\n      url,\n      progress: {type: 'fullscreen'},\n      submit: {\n        editor_object: existingValues,\n      },\n    });\n    ckeditorAjaxDialog.execute();\n\n    // Store the save callback to be executed when this dialog is closed.\n    Drupal.ckeditor5.saveCallback = saveCallback;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js?")},"./icons/play-circle.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d=\\"M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./icons/play-circle.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/videoEmbed/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));--- modules/video_embed_wysiwyg/js/build/videoEmbed.js
+++ modules/video_embed_wysiwyg/js/build/videoEmbed.js
@@ -1 +1 @@
-!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/videoEmbed/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _videoembed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembed */ "./js/ckeditor5_plugins/videoEmbed/src/videoembed.js");\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  VideoEmbed: _videoembed__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/index.js?')},"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertVideoEmbedCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertVideoEmbedCommand, which is executed when the videoEmbed\n * toolbar button is pressed.\n */\n\n\n\nclass InsertVideoEmbedCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute(attributes) {\n    const {model} = this.editor;\n\n    model.change((writer) => {\n      // Insert <videoEmbed *></videoEmbed> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createVideoEmbed(writer, attributes));\n    });\n  }\n\n  refresh() {\n    const {model} = this.editor;\n    const {selection} = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // videoEmbed is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n        selection.getFirstPosition(),\n        'videoEmbed',\n    );\n\n    // If the cursor is not in a location where a videoEmbed can be added,\n    // return null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createVideoEmbed(writer, attributes) {\n  // Create instances of the element registered with the editor in\n  // videoembedediting.js.\n  const videoEmbed = writer.createElement('videoEmbed', attributes);\n\n  // Return the element to be added to the editor.\n  return videoEmbed;\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembed.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ VideoEmbed)\n/* harmony export */ });\n/* harmony import */ var _videoembedediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./videoembedediting */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js");\n/* harmony import */ var _videoembedui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./videoembedui */ "./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n\n\n\n\nclass VideoEmbed extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n\nstatic get requires() {\n    return [_videoembedediting__WEBPACK_IMPORTED_MODULE_0__["default"], _videoembedui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembed.js?')},"./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertvideoembedcommand */ \"./js/ckeditor5_plugins/videoEmbed/src/insertvideoembedcommand.js\");\n\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with videoEmbed as this model:\n * <videoEmbed videoUrl=\"https://some.video.url\" responsive=\"trueorfalse\"\n * width=\"42\" height=\"42\" autoplay=\"trueorfalse\"\n * previewThumbnail=\"/some/image/path.jpg\" settingsSummary=\"Some help\n * text.\"></videoEmbed>\n *\n * Which is converted in database (dataDowncast) as this:\n * <p>{\"preview_thumbnail\":\"/some/image/path.jpg\",\n * \"video_url\":\"https://some.video.url\",\"settings\":{\"responsive\":0or1,\"width\":\"42\",\"height\":\"42\",\"autoplay\":0or1}\",\n * settings_summary\":[\"Some help text.\"]}</p>\n *\n * The Drupal video_embed_wysiwyg format filter will then convert this into a\n * real HTML video embed, on PHP frontend rendering.\n *\n * videoEmbed model elements are also converted to HTML for preview in CKE5 UI\n * (editingDowncast).\n *\n * And the database markup can be converted back to model (upcast).\n *\n * This file has the logic for defining the videoEmbed model, and for how it is\n * converted from/to standard DOM markup for database/UI.\n */\nclass VideoEmbedEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n        'insertVideoEmbed',\n        new _insertvideoembedcommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <videoEmbed *></videoEmbed>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n\n    schema.register('videoEmbed', {\n      inheritAllFrom: '$blockObject',\n      allowAttributes: ['videoUrl', 'responsive', 'width', 'height', 'autoplay', 'previewThumbnail', 'settingsSummary']\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const {conversion} = this.editor;\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If <p>{\"preview_thumbnail\":......}</p> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <videoEmbed> model.\n    // @see\n    // https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_conversion_conversion-ConverterDefinition.html\n    conversion.for('upcast').elementToElement({\n      view: function (element) {\n        if (element.name === 'p') {\n          if (element.getChild(0).is('text')) {\n            let text = element.getChild(0).data;\n            if (text.match(/^({(?=.*preview_thumbnail\\b)(?=.*settings\\b)(?=.*video_url\\b)(?=.*settings_summary)(.*)})$/)) {\n              return {name: true};\n            }\n          }\n        }\n        return null;\n      },\n      model: (viewElement, {writer}) => {\n        let data = JSON.parse(viewElement.getChild(0).data);\n        return writer.createElement('videoEmbed',\n            {\n              'videoUrl': data.video_url,\n              'responsive': !!data.settings.responsive,\n              'width': data.settings.width,\n              'height': data.settings.height,\n              'autoplay': !!data.settings.autoplay,\n              'previewThumbnail': data.preview_thumbnail,\n              'settingsSummary': data.settings_summary[0],\n            });\n      },\n      // Avoid it's converted to a normal paragraph.\n      converterPriority: 'high'\n    });\n\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <videoEmbed> are saved as\n    // <p>{\"preview_thumbnail\":......}</p>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'videoEmbed',\n      view: (modelElement, {writer}) => {\n        const data = {};\n        data.preview_thumbnail = modelElement.getAttribute('previewThumbnail');\n        data.video_url = modelElement.getAttribute('videoUrl');\n        data.settings = {};\n        ['responsive', 'width', 'height', 'autoplay'].forEach(function (attributeName) {\n          data.settings[attributeName] = modelElement.getAttribute(attributeName);\n        });\n        data.settings_summary = [modelElement.getAttribute('settingsSummary')];\n        return writer.createContainerElement('p', {}, [writer.createText(JSON.stringify(data))]);\n      }\n    });\n\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <videoEmbed> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n          model: 'videoEmbed',\n          view: (modelElement, {writer}) => {\n            const preview = writer.createContainerElement('span', {class: 'video-embed-widget'}, [\n              writer.createEmptyElement('img', {\n                class: 'video-embed-widget__image',\n                src: modelElement.getAttribute('previewThumbnail')\n              }),\n              writer.createContainerElement('span', {class: 'video-embed-widget__summary'}, [\n                writer.createText(modelElement.getAttribute('settingsSummary'))\n              ])\n            ]);\n            return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(preview, writer, {label: Drupal.t('Video Embed')});\n          }\n        }\n    );\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedediting.js?")},"./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VideoEmbedUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../icons/play-circle.svg */ \"./icons/play-circle.svg\");\n/**\n * @file registers the videoEmbed toolbar button and binds functionality to it.\n */\n\n\n\n\n/* @todo Choose the best icon and remove others. */\n\n\nclass VideoEmbedUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n\n    // This will register the videoEmbed toolbar button.\n    editor.ui.componentFactory.add('videoEmbed', (locale) => {\n      const command = editor.commands.get('insertVideoEmbed');\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Video Embed'),\n        icon: _icons_play_circle_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () => {\n            this.openEditingDialog();\n          }\n      );\n\n      return buttonView;\n    });\n  }\n\n  /**\n   * Opens video embed form when the editing button is clicked.\n   */\n  openEditingDialog() {\n    const {editor} = this;\n\n    // If the selected element while we click the button is an instance\n    // of the video_embed widget, extract its values so they can be\n    // sent to the server to prime the configuration form.\n    let existingValues = {settings: {}};\n    const selectedVideoEmbedElement = editor.model.document.selection.getSelectedElement();\n    if (selectedVideoEmbedElement) {\n      if (selectedVideoEmbedElement.hasAttribute('videoUrl')) {\n        existingValues.video_url = selectedVideoEmbedElement.getAttribute('videoUrl');\n      }\n      ['responsive', 'width', 'height', 'autoplay'].forEach(function (attributeName) {\n        if (selectedVideoEmbedElement.hasAttribute(attributeName)) {\n          existingValues.settings[attributeName] = selectedVideoEmbedElement.getAttribute(attributeName);\n        }\n      });\n    }\n    this._openDialog(\n        Drupal.url('video-embed-wysiwyg/dialog/' + editor.config.get('videoEmbed').format),\n        existingValues,\n        (newValues) => {\n\n          const attributes = {\n            videoUrl: newValues.video_url,\n            responsive: newValues.settings.responsive,\n            width: newValues.settings.width,\n            height: newValues.settings.height,\n            autoplay: newValues.settings.autoplay,\n            // These attributes are useful only for editor preview, but are\n            // keeped on dataDowncast so that they can be retrieved on later\n            // upcast+editingDowncast.\n            settingsSummary: newValues.settings_summary[0],\n            previewThumbnail: newValues.preview_thumbnail,\n          }\n          editor.execute('insertVideoEmbed', attributes);\n        },\n        {\n          title: Drupal.t('Video Embed'),\n          dialogClass: 'video-embed-dialog'\n        }\n    );\n  }\n\n  /**\n   * This method is adapted from drupal's ckeditor5.js file due to an issue\n   * where the \"editor_object\" isn't passed to the ajax request.\n   *\n   * See https://www.drupal.org/project/drupal/issues/3303191\n   *\n   * @param {string} url\n   *   The URL that contains the contents of the dialog.\n   * @param {object} existingValues\n   *   Existing values that will be sent via POST to the url for the dialog\n   *   contents.\n   * @param {function} saveCallback\n   *   A function to be called upon saving the dialog.\n   * @param {object} dialogSettings\n   *   An object containing settings to be passed to the jQuery UI.\n   */\n  _openDialog(url, existingValues, saveCallback, dialogSettings = {}) {\n    // Add a consistent dialog class.\n    const classes = dialogSettings.dialogClass\n        ? dialogSettings.dialogClass.split(' ')\n        : [];\n    classes.push('ui-dialog--narrow');\n    dialogSettings.dialogClass = classes.join(' ');\n    dialogSettings.autoResize =\n        window.matchMedia('(min-width: 600px)').matches;\n    dialogSettings.width = 'auto';\n\n    const ckeditorAjaxDialog = Drupal.ajax({\n      dialog: dialogSettings,\n      dialogType: 'modal',\n      selector: '.ckeditor5-dialog-loading-link',\n      url,\n      progress: {type: 'fullscreen'},\n      submit: {\n        editor_object: existingValues,\n      },\n    });\n    ckeditorAjaxDialog.execute();\n\n    // Store the save callback to be executed when this dialog is closed.\n    Drupal.ckeditor5.saveCallback = saveCallback;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./js/ckeditor5_plugins/videoEmbed/src/videoembedui.js?")},"./icons/play-circle.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d=\\"M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/./icons/play-circle.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.videoEmbed/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/videoEmbed/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));+!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var e={"ckeditor5/src/core.js":(e,t,i)=>{e.exports=i("dll-reference CKEditor5.dll")("./src/core.js")},"ckeditor5/src/ui.js":(e,t,i)=>{e.exports=i("dll-reference CKEditor5.dll")("./src/ui.js")},"ckeditor5/src/widget.js":(e,t,i)=>{e.exports=i("dll-reference CKEditor5.dll")("./src/widget.js")},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},t={};function i(o){var s=t[o];if(void 0!==s)return s.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,i),r.exports}i.d=(e,t)=>{for(var o in t)i.o(t,o)&&!i.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var o={};return(()=>{"use strict";i.d(o,{default:()=>a});var e=i("ckeditor5/src/core.js"),t=i("ckeditor5/src/widget.js");class s extends e.Command{execute(e){const{model:t}=this.editor;t.change((i=>{t.insertContent(function(e,t){return e.createElement("videoEmbed",t)}(i,e))}))}refresh(){const{model:e}=this.editor,{selection:t}=e.document,i=e.schema.findAllowedParent(t.getFirstPosition(),"videoEmbed");this.isEnabled=null!==i}}class r extends e.Plugin{static get requires(){return[t.Widget]}init(){this._defineSchema(),this._defineConverters(),this.editor.commands.add("insertVideoEmbed",new s(this.editor))}_defineSchema(){this.editor.model.schema.register("videoEmbed",{inheritAllFrom:"$blockObject",allowAttributes:["videoUrl","responsive","width","height","autoplay","previewThumbnail","settingsSummary"]})}_defineConverters(){const{conversion:e}=this.editor;e.for("upcast").elementToElement({view:function(e){if("p"===e.name&&e.getChild(0).is("text")){if(e.getChild(0).data.match(/^({(?=.*preview_thumbnail\b)(?=.*settings\b)(?=.*video_url\b)(?=.*settings_summary)(.*)})$/))return{name:!0}}return null},model:(e,{writer:t})=>{let i=JSON.parse(e.getChild(0).data);return t.createElement("videoEmbed",{videoUrl:i.video_url,responsive:!!i.settings.responsive,width:i.settings.width,height:i.settings.height,autoplay:!!i.settings.autoplay,previewThumbnail:i.preview_thumbnail,settingsSummary:i.settings_summary[0]})},converterPriority:"high"}),e.for("dataDowncast").elementToElement({model:"videoEmbed",view:(e,{writer:t})=>{const i={};return i.preview_thumbnail=e.getAttribute("previewThumbnail"),i.video_url=e.getAttribute("videoUrl"),i.settings={},["responsive","width","height","autoplay"].forEach((function(t){i.settings[t]=e.getAttribute(t)})),i.settings_summary=[e.getAttribute("settingsSummary")],t.createContainerElement("p",{},[t.createText(JSON.stringify(i))])}}),e.for("editingDowncast").elementToElement({model:"videoEmbed",view:(e,{writer:i})=>{const o=i.createContainerElement("span",{class:"video-embed-widget"},[i.createEmptyElement("img",{class:"video-embed-widget__image",src:e.getAttribute("previewThumbnail")}),i.createContainerElement("span",{class:"video-embed-widget__summary"},[i.createText(e.getAttribute("settingsSummary"))])]);return(0,t.toWidget)(o,i,{label:Drupal.t("Video Embed")})}})}}var n=i("ckeditor5/src/ui.js");class d extends e.Plugin{init(){const e=this.editor;e.ui.componentFactory.add("videoEmbed",(t=>{const i=e.commands.get("insertVideoEmbed"),o=new n.ButtonView(t);return o.set({label:e.t("Video Embed"),icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d="M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z"/></svg>',tooltip:!0}),o.bind("isOn","isEnabled").to(i,"value","isEnabled"),this.listenTo(o,"execute",(()=>{this.openEditingDialog()})),o}))}openEditingDialog(){const{editor:e}=this;let t={settings:{}};const i=e.model.document.selection.getSelectedElement();i&&(i.hasAttribute("videoUrl")&&(t.video_url=i.getAttribute("videoUrl")),["responsive","width","height","autoplay"].forEach((function(e){i.hasAttribute(e)&&(t.settings[e]=i.getAttribute(e))}))),this._openDialog(Drupal.url("video-embed-wysiwyg/dialog/"+e.config.get("videoEmbed").format),t,(t=>{const i={videoUrl:t.video_url,responsive:t.settings.responsive,width:t.settings.width,height:t.settings.height,autoplay:t.settings.autoplay,settingsSummary:t.settings_summary[0],previewThumbnail:t.preview_thumbnail};e.execute("insertVideoEmbed",i)}),{title:Drupal.t("Video Embed"),dialogClass:"video-embed-dialog"})}_openDialog(e,t,i,o={}){const s=o.dialogClass?o.dialogClass.split(" "):[];s.push("ui-dialog--narrow"),o.dialogClass=s.join(" "),o.autoResize=window.matchMedia("(min-width: 600px)").matches,o.width="auto";Drupal.ajax({dialog:o,dialogType:"modal",selector:".ckeditor5-dialog-loading-link",url:e,progress:{type:"fullscreen"},submit:{editor_object:t}}).execute(),Drupal.ckeditor5.saveCallback=i}}class l extends e.Plugin{static get requires(){return[r,d]}}const a={VideoEmbed:l}})(),o=o.default})()));--- modules/video_embed_wysiwyg/js/build/videoEmbed.js
+++ modules/video_embed_wysiwyg/js/build/videoEmbed.js
@@ -1 +1 @@
-!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var e={"ckeditor5/src/core.js":(e,t,i)=>{e.exports=i("dll-reference CKEditor5.dll")("./src/core.js")},"ckeditor5/src/ui.js":(e,t,i)=>{e.exports=i("dll-reference CKEditor5.dll")("./src/ui.js")},"ckeditor5/src/widget.js":(e,t,i)=>{e.exports=i("dll-reference CKEditor5.dll")("./src/widget.js")},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},t={};function i(o){var s=t[o];if(void 0!==s)return s.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,i),r.exports}i.d=(e,t)=>{for(var o in t)i.o(t,o)&&!i.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var o={};return(()=>{"use strict";i.d(o,{default:()=>a});var e=i("ckeditor5/src/core.js"),t=i("ckeditor5/src/widget.js");class s extends e.Command{execute(e){const{model:t}=this.editor;t.change((i=>{t.insertContent(function(e,t){return e.createElement("videoEmbed",t)}(i,e))}))}refresh(){const{model:e}=this.editor,{selection:t}=e.document,i=e.schema.findAllowedParent(t.getFirstPosition(),"videoEmbed");this.isEnabled=null!==i}}class r extends e.Plugin{static get requires(){return[t.Widget]}init(){this._defineSchema(),this._defineConverters(),this.editor.commands.add("insertVideoEmbed",new s(this.editor))}_defineSchema(){this.editor.model.schema.register("videoEmbed",{inheritAllFrom:"$blockObject",allowAttributes:["videoUrl","responsive","width","height","autoplay","previewThumbnail","settingsSummary"]})}_defineConverters(){const{conversion:e}=this.editor;e.for("upcast").elementToElement({view:function(e){if("p"===e.name&&e.getChild(0).is("text")){if(e.getChild(0).data.match(/^({(?=.*preview_thumbnail\b)(?=.*settings\b)(?=.*video_url\b)(?=.*settings_summary)(.*)})$/))return{name:!0}}return null},model:(e,{writer:t})=>{let i=JSON.parse(e.getChild(0).data);return t.createElement("videoEmbed",{videoUrl:i.video_url,responsive:!!i.settings.responsive,width:i.settings.width,height:i.settings.height,autoplay:!!i.settings.autoplay,previewThumbnail:i.preview_thumbnail,settingsSummary:i.settings_summary[0]})},converterPriority:"high"}),e.for("dataDowncast").elementToElement({model:"videoEmbed",view:(e,{writer:t})=>{const i={};return i.preview_thumbnail=e.getAttribute("previewThumbnail"),i.video_url=e.getAttribute("videoUrl"),i.settings={},["responsive","width","height","autoplay"].forEach((function(t){i.settings[t]=e.getAttribute(t)})),i.settings_summary=[e.getAttribute("settingsSummary")],t.createContainerElement("p",{},[t.createText(JSON.stringify(i))])}}),e.for("editingDowncast").elementToElement({model:"videoEmbed",view:(e,{writer:i})=>{const o=i.createContainerElement("span",{class:"video-embed-widget"},[i.createEmptyElement("img",{class:"video-embed-widget__image",src:e.getAttribute("previewThumbnail")}),i.createContainerElement("span",{class:"video-embed-widget__summary"},[i.createText(e.getAttribute("settingsSummary"))])]);return(0,t.toWidget)(o,i,{label:Drupal.t("Video Embed")})}})}}var n=i("ckeditor5/src/ui.js");class d extends e.Plugin{init(){const e=this.editor;e.ui.componentFactory.add("videoEmbed",(t=>{const i=e.commands.get("insertVideoEmbed"),o=new n.ButtonView(t);return o.set({label:e.t("Video Embed"),icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d="M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z"/></svg>',tooltip:!0}),o.bind("isOn","isEnabled").to(i,"value","isEnabled"),this.listenTo(o,"execute",(()=>{this.openEditingDialog()})),o}))}openEditingDialog(){const{editor:e}=this;let t={settings:{}};const i=e.model.document.selection.getSelectedElement();i&&(i.hasAttribute("videoUrl")&&(t.video_url=i.getAttribute("videoUrl")),["responsive","width","height","autoplay"].forEach((function(e){i.hasAttribute(e)&&(t.settings[e]=i.getAttribute(e))}))),this._openDialog(Drupal.url("video-embed-wysiwyg/dialog/"+e.config.get("videoEmbed").format),t,(t=>{const i={videoUrl:t.video_url,responsive:t.settings.responsive,width:t.settings.width,height:t.settings.height,autoplay:t.settings.autoplay,settingsSummary:t.settings_summary[0],previewThumbnail:t.preview_thumbnail};e.execute("insertVideoEmbed",i)}),{title:Drupal.t("Video Embed"),dialogClass:"video-embed-dialog"})}_openDialog(e,t,i,o={}){const s=o.dialogClass?o.dialogClass.split(" "):[];s.push("ui-dialog--narrow"),o.dialogClass=s.join(" "),o.autoResize=window.matchMedia("(min-width: 600px)").matches,o.width="auto";Drupal.ajax({dialog:o,dialogType:"modal",selector:".ckeditor5-dialog-loading-link",url:e,progress:{type:"fullscreen"},submit:{editor_object:t}}).execute(),Drupal.ckeditor5.saveCallback=i}}class l extends e.Plugin{static get requires(){return[r,d]}}const a={VideoEmbed:l}})(),o=o.default})()));+!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.videoEmbed=t())}(self,(()=>(()=>{var e={"ckeditor5/src/core.js":(e,t,i)=>{e.exports=i("dll-reference CKEditor5.dll")("./src/core.js")},"ckeditor5/src/ui.js":(e,t,i)=>{e.exports=i("dll-reference CKEditor5.dll")("./src/ui.js")},"ckeditor5/src/widget.js":(e,t,i)=>{e.exports=i("dll-reference CKEditor5.dll")("./src/widget.js")},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},t={};function i(o){var s=t[o];if(void 0!==s)return s.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,i),r.exports}i.d=(e,t)=>{for(var o in t)i.o(t,o)&&!i.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var o={};return(()=>{"use strict";i.d(o,{default:()=>a});var e=i("ckeditor5/src/core.js"),t=i("ckeditor5/src/widget.js");class s extends e.Command{execute(e){const{model:t}=this.editor;t.change((i=>{t.insertContent(function(e,t){return e.createElement("videoEmbed",t)}(i,e))}))}refresh(){const{model:e}=this.editor,{selection:t}=e.document,i=e.schema.findAllowedParent(t.getFirstPosition(),"videoEmbed");this.isEnabled=null!==i}}class r extends e.Plugin{static get requires(){return[t.Widget]}init(){this._defineSchema(),this._defineConverters(),this.editor.commands.add("insertVideoEmbed",new s(this.editor))}_defineSchema(){this.editor.model.schema.register("videoEmbed",{inheritAllFrom:"$blockObject",allowAttributes:["videoUrl","responsive","width","height","autoplay","previewThumbnail","settingsSummary"]})}_defineConverters(){const{conversion:e}=this.editor;e.for("upcast").elementToElement({view:function(e){const t=e.getChild(0);if("p"===e.name&&t&&t.is("text")){if(e.getChild(0).data.match(/^({(?=.*preview_thumbnail\b)(?=.*settings\b)(?=.*video_url\b)(?=.*settings_summary)(.*)})$/))return{name:!0}}return null},model:(e,{writer:t})=>{let i=JSON.parse(e.getChild(0).data);return t.createElement("videoEmbed",{videoUrl:i.video_url,responsive:!!i.settings.responsive,width:i.settings.width,height:i.settings.height,autoplay:!!i.settings.autoplay,previewThumbnail:i.preview_thumbnail,settingsSummary:i.settings_summary[0]})},converterPriority:"high"}),e.for("dataDowncast").elementToElement({model:"videoEmbed",view:(e,{writer:t})=>{const i={};return i.preview_thumbnail=e.getAttribute("previewThumbnail"),i.video_url=e.getAttribute("videoUrl"),i.settings={},["responsive","width","height","autoplay"].forEach((function(t){i.settings[t]=e.getAttribute(t)})),i.settings_summary=[e.getAttribute("settingsSummary")],t.createContainerElement("p",{},[t.createText(JSON.stringify(i))])}}),e.for("editingDowncast").elementToElement({model:"videoEmbed",view:(e,{writer:i})=>{const o=i.createContainerElement("span",{class:"video-embed-widget"},[i.createEmptyElement("img",{class:"video-embed-widget__image",src:e.getAttribute("previewThumbnail")}),i.createContainerElement("span",{class:"video-embed-widget__summary"},[i.createText(e.getAttribute("settingsSummary"))])]);return(0,t.toWidget)(o,i,{label:Drupal.t("Video Embed")})}})}}var n=i("ckeditor5/src/ui.js");class d extends e.Plugin{init(){const e=this.editor;e.ui.componentFactory.add("videoEmbed",(t=>{const i=e.commands.get("insertVideoEmbed"),o=new n.ButtonView(t);return o.set({label:e.t("Video Embed"),icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\x3c!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --\x3e<path d="M371.7 238l-176-107c-15.8-8.8-35.7 2.5-35.7 21v208c0 18.4 19.8 29.8 35.7 21l176-101c16.4-9.1 16.4-32.8 0-42zM504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zm-448 0c0-110.5 89.5-200 200-200s200 89.5 200 200-89.5 200-200 200S56 366.5 56 256z"/></svg>',tooltip:!0}),o.bind("isOn","isEnabled").to(i,"value","isEnabled"),this.listenTo(o,"execute",(()=>{this.openEditingDialog()})),o}))}openEditingDialog(){const{editor:e}=this;let t={settings:{}};const i=e.model.document.selection.getSelectedElement();i&&(i.hasAttribute("videoUrl")&&(t.video_url=i.getAttribute("videoUrl")),["responsive","width","height","autoplay"].forEach((function(e){i.hasAttribute(e)&&(t.settings[e]=i.getAttribute(e))}))),this._openDialog(Drupal.url("video-embed-wysiwyg/dialog/"+e.config.get("videoEmbed").format),t,(t=>{const i={videoUrl:t.video_url,responsive:t.settings.responsive,width:t.settings.width,height:t.settings.height,autoplay:t.settings.autoplay,settingsSummary:t.settings_summary[0],previewThumbnail:t.preview_thumbnail};e.execute("insertVideoEmbed",i)}),{title:Drupal.t("Video Embed"),dialogClass:"video-embed-dialog"})}_openDialog(e,t,i,o={}){const s=o.dialogClass?o.dialogClass.split(" "):[];s.push("ui-dialog--narrow"),o.dialogClass=s.join(" "),o.autoResize=window.matchMedia("(min-width: 600px)").matches,o.width="auto";Drupal.ajax({dialog:o,dialogType:"modal",selector:".ckeditor5-dialog-loading-link",url:e,progress:{type:"fullscreen"},submit:{editor_object:t}}).execute(),Drupal.ckeditor5.saveCallback=i}}class l extends e.Plugin{static get requires(){return[r,d]}}const a={VideoEmbed:l}})(),o=o.default})()));