<?php

use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\Role;

/**
 * Implements hook_entity_form_display_alter().
 */

function form_mode_control_entity_form_display_alter(&$form_display, $context) {
  $request = \Drupal::request();
  $display_name = $request->query->get('display');
  // Load the right entity form display. Works for any entity / bundle.
  $id = $context['entity_type'] . '.' . $context['bundle'] . '.' . $display_name;
  $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
  $configuration = \Drupal::configFactory()
    ->getEditable('form_mode_control.settings')->getRawData();
  switch ($context['form_mode']) {
    case "default":
    case "add":
      $mode = 'creation';
      controlAccessFormMode($configuration, $mode, $display_name, $storage, $id, $form_display, $context);
      break;
    case "edit":
      $mode = 'modification';
      controlAccessFormMode($configuration, $mode, $display_name, $storage, $id, $form_display, $context);
      break;
    case 'register':
      $mode = 'default';
      controlAccessFormMode($configuration, $mode, $display_name, $storage, $id, $form_display, $context);
      break;
  }
}

/**
 *  Implements hook_form_alter().
 */
function form_mode_control_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id == "entity_form_mode_add_form" || $form_id == "entity_form_mode_edit_form") {
    $form['markup'] = array(
      '#type' => "markup",
      '#markup' => t('If you want to change to another form mode , add <strong style="color: #ff0000">?display=machine_name_form_mode.</strong> ')
    );
  }
}

/**
 * @param $configurations
 * @return array
 */
function extractConfigFormStates($configurations, $mode = 'creation', $id_role = "authenticated") {
  $configuration_form_state = [];
  foreach ($configurations as $form_state_key => $display) {
    if (empty($display)) {
      continue;
    }

    $form_state_key_parts = explode('+', $form_state_key);

    if (empty($form_state_key_parts)) {
      // Should not be an empty array.
      continue;
    }

    if (count($form_state_key_parts) != 4) {
      // Not a valid form state key.
      continue;
    }

    if ($form_state_key_parts[0] === $mode && $form_state_key_parts[1] === $id_role) {
      $configuration_form_state[$form_state_key] = $display;
    }
  }
  return $configuration_form_state;
}

/**
 * @param $configurations
 * @return array
 */
function extractConfigPermissionByDisplay($configurations) {
  $configuration_form_state = array();
  foreach ($configurations as $permission => $form_state_key) {
    if (substr_count($permission, "linked to") != 0) {
      $configuration_form_state[$form_state_key] = $permission;
    }
  }
  return $configuration_form_state;
}

/**
 * @param $mode
 * @param $id_role
 * @param $display_query
 * @return mixed
 */
function getPermissionByModeAndRole($display_query, $configuration, $context) {
  $extractConfigPermissionByDisplay = extractConfigPermissionByDisplay($configuration);
  $entity_type = $context['entity_type'];
  $bundle = $context['bundle'];
  $id = "$entity_type.$bundle.$display_query";
  if (!empty($extractConfigPermissionByDisplay[$id]) && EntityFormDisplay::load($id)
      ->status() == TRUE
  ) {
    return $extractConfigPermissionByDisplay[$id];
  }
}

/**
 * @param $configuration
 * @param $mode
 * @param $display_name
 * @param \Drupal\Core\Entity\EntityStorageInterface $storage
 *   Storage interface for entity_form_display.
 * @param string $id
 *   Full display id in the form of entity_type.bundle.display_name.
 * @param $form_display
 * @param $context
 */
function controlAccessFormMode($configuration, $mode, $display_name, EntityStorageInterface $storage, $id, &$form_display, $context) {
  // The role which has a maximum weight.
  $id_role = getRoleIdWithMaxWeight();
  $permission_access_all = "access_all_form_modes";

  // Get the right permission by mode( creation or edit), the role and display name used( ?display_name = display )
  $permission = getPermissionByModeAndRole($display_name, $configuration, $context);

  /**
   * Control the access to the form mode.
   * We have 3 conditions:
   * if the current user has access to all form modes , the default
   * form mode is activated ( default) else if you use ?display= correct_display
   * else if the user has access  only to different form modes,
   * the form mode used by default is the form modes
   * which the user has configured in
   * (www.your-site.com//admin/structure/display-modes/form/config-form-modes)
   * else finally, if the user does'nt has the permission to access
   * to the form mode, automatically, the form will returned with the default
   * form mode configured.
   *
   */
  // Default display id is a backup when a specified display was not found.
  $default_display_id = getTheRightDisplay($configuration, $mode, $id_role, $context);
  $default_display_id_parts = explode('.', $default_display_id);

  $form_mode_id = explode('.', $id)[2];

  $current_id = $id;

  if (empty($form_mode_id)) {
    // The form mode is not specified.
    // Try to retrieve at least the default form mode for the current user.
    if (!empty($default_display_id_parts[2])) {
      // The form mode is not specified and there is a default form mode for the
      // current user.
      $current_id = $default_display_id;
    }
  }

  if (\Drupal::currentUser()->hasPermission($permission_access_all)) {
    // Load and replace the form display.
    /* @var \Drupal\Core\Entity\Entity\EntityFormDisplay $change_display */
    $change_display = $storage->load($current_id);

    if ($change_display) {
      // The form mode exists and will be used instead.
      $form_display = $change_display;
      return;
    }

    // The form mode likely does not exist.
    if ($current_id === $default_display_id) {
      // We already tried to load the default display. Nothing more to be done.
      return;
    }
  }
  elseif (\Drupal::currentUser()->hasPermission($permission)) {
    $change_display = $storage->load($current_id);

    if ($change_display) {
      // The form mode exists.
      $form_display = $change_display;
      return;
    }

    // The user has permission but the display does not exist (anymore).
    if ($current_id === $default_display_id) {
      // We already tried to load the default display. Nothing more to be done.
      return;
    }
  }

  // At least try to use a default one.
  if (empty($default_display_id_parts[2])) {
    // There is no default display for the current user. Abort.
    return;
  }

  $change_display = $storage->load($default_display_id);

  if (empty($change_display) || !$change_display->status()) {
    // Couldn't get anything. Abort.
    return;
  }

  $form_display = $change_display;
}

/**
 * Choose the maximum weight for  current user 's role.
 * @return int|string
 */
function getRoleIdWithMaxWeight() {
  // Get all roles.
  /* @var \Drupal\user\Entity\Role[] $all_role_entities */
  $all_role_entities = Role::loadMultiple();

  $all_id_roles = array_keys($all_role_entities);

  // Get roles of current user.
  $roles_current_user = \Drupal::currentUser()->getRoles();
  $roles_intersect = array_values(array_intersect($all_id_roles, $roles_current_user));

  // Get weight and id of the first role.
  $first_role = $roles_intersect[0];
  $max_weight = $all_role_entities[$first_role]->getWeight();
  $id_role_max_weight = $first_role;

  foreach ($roles_intersect as $id_role) {
    if ($all_role_entities[$id_role]->getWeight() > $max_weight) {
      // Use this role instead.
      $max_weight = $all_role_entities[$id_role]->getWeight();
      $id_role_max_weight = $id_role;
    }
  }

  return $id_role_max_weight;
}

/**
 * If the user does'nt has the permission to a form mode, he redirected to
 * the default form mode configured in the configure page.
 *
 * The configuration
 * @param $configuration
 * @param $mode
 * @param $id_role
 * @param $context
 * @return string
 */
function getTheRightDisplay($configuration, $mode, $id_role, $context) {
  $extractConfigFormStates = extractConfigFormStates($configuration, $mode, $id_role);
  foreach ($extractConfigFormStates as $form_state_key => $form_mode_id) {
    $display_settings = explode('.', $form_mode_id);
    $entity_type = $display_settings[0];
    $bundle = $display_settings[1];
    if ($context['entity_type'] == $entity_type && $context['bundle'] == $bundle) {
      // Build the display id to use for the given entity type, bundle, role and
      // mode.
      $display_name = $display_settings[2];
      $id = $context['entity_type'] . '.' . $context['bundle'] . '.' . $display_name;
      return $id;
    }
  }
}

/**
 * @param $entity_type
 * @param $bundle
 * @param $display_searched
 * @return mixed
 */
function getLabelFormModeFromMachineName($entity_type, $bundle, $display_searched) {
  $displays = \Drupal::service('entity_display.repository')
    ->getFormModeOptionsByBundle($entity_type, $bundle);
  foreach ($displays as $machine_name_display => $label_display) {
    if (is_object($label_display) && $display_searched == $machine_name_display) {
      return $label_display->render();
    }
    else {
      if (!is_object($label_display) && $display_searched == $machine_name_display) {
        return $label_display;
      }
    }
  }
}

/**
 * Return the label of the bundle.(Ex. article => Article)
 * Machine name of the entity type.
 * @param $entity_type
 * @param $bundle_searched
 * @return mixed
 */
function getLabelBundle($entity_type, $bundle_searched) {
  $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo($entity_type);
  foreach ($bundles as $bundle => $label_bundle) {
    if ($bundle_searched == $bundle) {
      return $label_bundle['label'];
    }
  }
}

/**
 * Return the label of the entity type.Ex.(node => Content)
 * machine name of the entity type.
 * @param $entity_type
 * @return mixed
 */
function getLabelEntityType($entity_type) {
  $label = \Drupal::service('entity_type.repository')->getEntityTypeLabels()[$entity_type];
  if (is_object($label)) {
    return $label->render();
  }
  return $label;
}
