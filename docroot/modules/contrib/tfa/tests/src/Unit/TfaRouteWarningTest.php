<?php

declare(strict_types=1);

namespace Drupal\Tests\tfa\Unit;

use Drupal\Core\DependencyInjection\ContainerBuilder;
use Drupal\Core\Routing\RouteProviderInterface;
use Drupal\Tests\UnitTestCase;
use PHPUnit\Framework\Attributes\CoversFunction;
use PHPUnit\Framework\Attributes\Group;
use PHPUnit\Framework\MockObject\MockObject;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Symfony\Component\Routing\Route;

require_once __DIR__ . '/../../../tfa.install';
define('REQUIREMENT_ERROR', 2);

/**
 * Validates warnings generated by _tfa_route_validation()
 *
 * @group tfa
 *
 * @covers ::\_tfa_route_validation()
 */
#[Group('tfa')]
#[CoversFunction('\_tfa_route_validation')]
final class TfaRouteWarningTest extends UnitTestCase {
  /**
   * Route Provider service mock.
   *
   * @var \Drupal\Core\Routing\RouteProviderInterface&\PHPUnit\Framework\MockObject\MockObject
   */
  protected RouteProviderInterface&MockObject $routeProviderMock;

  /**
   * Map of routes for return by mock route_provider.
   */
  protected array $routeMap = [];

  /**
   * {@inheritdoc}
   */
  protected function setUp(): void {
    parent::setUp();
    $this->routeMap = [
      [
        'user.login',
        new Route('/', ['_form' => '\Drupal\tfa\Form\TfaLoginForm']),
      ],
      [
        'user.reset.login',
        new Route('/', ['_controller' => '\Drupal\tfa\Controller\TfaUserController::resetPassLogin']),
      ],
      [
        'user.login.http',
        new Route('/', ['_controller' => '\Drupal\tfa\Controller\TfaUserAuthenticationController::login']),
      ],
      [
        'user.reset',
        new Route('/', ['_controller' => '\Drupal\user\Controller\UserController::resetPass']),
      ],
    ];

    $this->routeProviderMock = $this->createMock(RouteProviderInterface::class);
    $container = new ContainerBuilder();
    $container->set('router.route_provider', $this->routeProviderMock);
    \Drupal::setContainer($container);
  }

  /**
   * Validates each route returns its own warning.
   *
   * @dataProvider providerTfaProtectedRoutes
   */
  public function testIndividualRouteWarnings(string $route_to_test = 'user.login'): void {

    foreach ($this->routeMap as $map_value) {
      if ($map_value[0] !== $route_to_test) {
        continue;
      }
      /** @var \Symfony\Component\Routing\Route $route */
      $route = $map_value[1];
      if (array_key_exists('_controller', $route->getDefaults())) {
        $route->setDefault('_controller', '\Incorrect\Class');
      }
      elseif (array_key_exists('_form', $route->getDefaults())) {
        $route->setDefault('_form', '\Incorrect\Class');
      }
    }
    $this->routeProviderMock->method('getRouteByName')->willReturnMap($this->routeMap);

    $validations = _tfa_route_validation();
    $this->assertArrayHasKey('tfa.route.' . $route_to_test, $validations);
  }

  /**
   * Tests error when routes not found.
   *
   * @dataProvider providerTfaProtectedRoutes
   */
  public function testRouteMissing(string $route_to_test): void {

    $callback = function (string $route_name) use ($route_to_test) {
      if ($route_name == $route_to_test) {
        throw new RouteNotFoundException('$route_name');
      }
      foreach ($this->routeMap as $map_value) {
        if ($map_value[0] === $route_name) {
          return $map_value[1];
        }
      }
    };

    $this->routeProviderMock->method('getRouteByName')->willReturnCallback($callback);

    $validations = _tfa_route_validation();
    $this->assertArrayHasKey('tfa.route.missing', $validations);
  }

  /**
   * Provide lists of routes TFA protects.
   */
  public static function providerTfaProtectedRoutes(): \Generator {
    yield 'User login route' => ['user.login'];
    yield 'User reset route' => ['user.reset.login'];
    yield 'User login http(post)' => ['user.login.http'];
    yield 'User reset' => ['user.reset'];
  }

}
