<?php

/**
 * @file
 * Hook implementations for the password_policy_extras module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_help().
 */
function password_policy_extras_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.password_policy_extras':
      $readme = file_get_contents(dirname(__FILE__) . '/README.md');
      if (\Drupal::moduleHandler()->moduleExists('markdown')) {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($readme, 'en');
      }
      elseif (\Drupal::moduleHandler()->moduleExists('markdown_easy')) {
        // Use the Markdown Easy filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $config = ['settings' => ['flavor' => 'github']];
        $filter = $filter_manager->createInstance('markdown_easy', $config);
        return $filter->process($readme, 'en');
      }
      else {
        return '<pre>' . $readme . '</pre>';
      }
  }
  return NULL;
}

/**
 * Implements hook_module_implements_alter().
 *
 * Make sure that our hooks are called AFTER Password Policy ones.
 * Sadly doesn't seem to work anymore, at least for form_alter hooks.
 */
function password_policy_extras_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    // Move our hook implementations to the end of the list.
    case 'element_info_alter':
    case 'form_user_form_alter':
    case 'form_alter':
      $implementation = $implementations['password_policy_extras'];
      unset($implementations['password_policy_extras']);
      $implementations['password_policy_extras'] = $implementation;
      break;
  }
}

/**
 * Implements hook_element_info_alter().
 */
function password_policy_extras_element_info_alter(array &$types) {
  if (isset($types['password_confirm'])) {
    // Disable default processor from password_policy which requires a user
    // entity in form_state that we might not have in all cases (prlp).
    if (($key = array_search(
      'password_policy_check_constraints_password_confirm_process',
      $types['password_confirm']['#process'])) !== FALSE) {
      unset($types['password_confirm']['#process'][$key]);
    }
    $types['password_confirm']['#process'][] =
      'password_policy_extras_check_constraints_password_confirm_process';
  }
}

/**
 * Custom callback to update the password confirm element.
 *
 * @param array $element
 *   Form element of the password confirm form field.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param array $form
 *   The form array.
 *
 * @return mixed
 *   Updated form field element.
 */
function password_policy_extras_check_constraints_password_confirm_process(
  array $element,
  FormStateInterface $form_state,
  array $form,
) {
  if (\Drupal::service('password_policy.validation_manager')->tableShouldBeVisible()) {
    // We enable Ajax in all cases for now even if a user object is not present.
    $element['pass1']['#ajax'] = [
      'event' => 'change',
      'callback' => '_password_policy_extras_check_constraints',
      'method' => 'replaceWith',
      'wrapper' => 'password-policy-status',
      'disable-refocus' => FALSE,
    ];
    // Ajax throbber can be disabled in module configuration.
    $config = \Drupal::config('password_policy_extras.settings');
    if ($config->get('disable_ajax_progress')) {
      $element['pass1']['#ajax']['progress'] = ['type' => 'none'];
    }
  }
  return $element;
}

/**
 * AJAX callback for password forms, with or without account fieldset.
 */
function _password_policy_extras_check_constraints($form, $form_state) {
  if (isset($form['account']['password_policy_status'])) {
    return $form['account']['password_policy_status'];
  }
  // In some cases the password status is not in the account fieldset (prlp).
  elseif (isset($form['password_policy_status'])) {
    return $form['password_policy_status'];
  }
}

/**
 * Implements hook_form_alter().
 */
function password_policy_extras_form_alter(array &$form, FormStateInterface $form_state) {
  // Do not remove.
  // Required for hook_form_user_form_alter correct execution ordering.
}

/**
 * Implements hook_form_FORM_ID_alter() for user_form().
 */
function password_policy_extras_form_user_form_alter(&$form, FormStateInterface $form_state) {
  if (\Drupal::service('password_policy.validation_manager')->tableShouldBeVisible()) {

    _password_policy_extras_add_libraries_and_settings_to_form($form);

    $user = _password_policy_extras_get_user_from_state($form_state);
    if ($user && !$user->isNew() && $form_state->getValue('pass', '') === '') {
      // When updating the user, hide password status table by default if the
      // password field is empty, the user probably doesn't want to modify the
      // password.
      $form['account']['password_policy_status']['#wrapper_attributes']['style'] = 'display: none;';
      $config = \Drupal::config('password_policy_extras.settings');
      if ($config->get('display_status_on_focus')) {
        // Disable status table hiding when the password is empty (#states).
        // We need to be able to show the status table on password focus
        // even if the password is empty.
        unset($form['account']['password_policy_status']['#states']);
      }
    }
    else {
      // Otherwise, never hide status table on user creation or registration
      // even if the password is empty (#states).
      unset($form['account']['password_policy_status']['#states']);
    }
  }
}

/**
 * Get user entity from form state.
 *
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return \Drupal\user\UserInterface|null
 *   The user from form state if available, NULL otherwise.
 */
function _password_policy_extras_get_user_from_state(FormStateInterface $form_state): ?UserInterface {
  $form_object = $form_state->getFormObject();
  if (method_exists($form_object, 'getEntity') && $form_object->getEntity() instanceof UserInterface) {
    return $form_object->getEntity();
  }
  return NULL;
}

/**
 * Generates the password status table.
 *
 * This helper function can be used by other modules like prlp to avoid code
 * duplication.
 *
 * @param string $password
 *   The password.
 * @param \Drupal\user\UserInterface $user
 *   The user object.
 * @param array $roles
 *   The user roles.
 *
 * @return array
 *   The password status table render array.
 */
function _password_policy_extras_status_item($password, $user, $roles): array {
  return [
    '#type' => 'item',
    '#theme' => 'password_policy_status',
    '#prefix' => '<div id="password-policy-status">',
    '#suffix' => '</div>',
    '#constraints' => \Drupal::service('password_policy.validator')
      ->buildPasswordPolicyConstraintsTableRows($password, $user, $roles),
    '#states' => [
      'invisible' => [
        ':input[name="pass[pass1]"]' => ['value' => ''],
      ],
    ],
  ];
}

/**
 * Adds Password Policy Extras libraries and settings to form.
 *
 * @param array $form
 *   The form to update for use with Password Policy Extras.
 */
function _password_policy_extras_add_libraries_and_settings_to_form(&$form) {
  // Javascript to add delayed input change handling on password field.
  $form['#attached']['library'][] = 'password_policy_extras/password_policy_extras';
  $config = \Drupal::config('password_policy_extras.settings');
  // Defaults to 500ms delay if none defined in configuration.
  $form['#attached']['drupalSettings']['password_policy_extras']['status_refresh_delay'] =
    $config->get('status_refresh_delay') ?? 500;
  // Move status display below the main password field.
  $form['#attached']['drupalSettings']['password_policy_extras']['display_status_after_pass'] =
    $config->get('display_status_after_pass') ?? 0;
  // Display status on password field focus.
  $form['#attached']['drupalSettings']['password_policy_extras']['display_status_on_focus'] =
    $config->get('display_status_on_focus') ?? 0;

  if ($config->get('failed_messages_only')) {
    $form['#attached']['library'][] = 'password_policy_extras/failed_messages_only';
  }

  if ($config->get('hide_password_suggestions')) {
    $form['#attached']['library'][] = 'password_policy_extras/hide_password_suggestions';
  }
}
