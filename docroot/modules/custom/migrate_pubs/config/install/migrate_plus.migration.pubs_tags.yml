# A "migration" is, in technical terms, a plugin whose configuration describes
# how to read source data, process it (generally by mapping source fields to
# destination fields), and write it to Drupal.

# The machine name for a migration, used to uniquely identify it.
id: pubs_tags

# A human-friendly description of the migration.
label: Import keywords from CSV file to taxonomy terms

# The machine name of the group containing this migration (which contains shared
# configuration to be merged with our own configuration here).
migration_group: pubs

# The category or tag for the migration.
migration_tags:
  - tags

# Every migration must have a source plugin, which controls the delivery of our
# source data.
source:
  plugin: csv
  # Full path to the file.
  path: '/Users/chris/Downloads/pubs.iied data audit - Keywords.csv'
  # Column delimiter. Comma (,) by default.
  ids: [id]
  delimiter: ','
  # Field enclosure. Double quotation marks (") by default.
  enclosure: '"'
  # The number of rows at the beginning which are not data.
  header_row_count: 1
  # The column(s) to use as a key. Each column specified will
  # create an index in the migration table and too many columns
  # may throw an index size error.
  # Here we identify the columns of interest in the source file.
  # Each numeric key is the 0-based index of the column.
  # For each column, the key below is the field name assigned to
  # the data on import, to be used in field mappings below.
  # The value is a user-friendly string for display by the
  # migration UI.
# Here's the meat of the migration - the processing pipeline. This describes how
# each destination field is to be populated based on the source data. For each
# destination field, one or more process plugins may be invoked.
process:
  # The simplest process plugin is named 'get' - it is the default plugin, so
  # does not need to be explicitly named. It simply copies the source value
  # (the 'style' field from the source database in this case) to the destination
  # field (the taxonomy term 'name' field). You can see we simply copy the
  # source 'details' field to destination 'description' field in the same way.
  name: title
  # Here is a new plugin - default_value. In its simplest usage here, it is used
  # to hard-code a destination value, the vid (vocabulary ID) our taxonomy terms
  # should be assigned to. It's important to note that while above the right
  # side of the mappings was a source field name, here the right side of the
  # 'default_value:' line is an actual value.
  vid:
    plugin: default_value
    default_value: tags
  # Here's another new plugin - migration. When importing data from another
  # system, typically the unique identifiers for items on the destination side
  # are not the same as the identifiers were on the source side. For example, in
  # our style data the term names are the unique identifiers for each term,
  # while in Drupal each term is assigned a unique integer term ID (tid). When
  # any such items are referenced in Drupal, the reference needs to be
  # translated from the old ID ('ale') to the new ID (1). The migration
  # framework keeps track of the relationships between source and destination
  # IDs in map tables, and the migration plugin is the means of performing a
  # lookup in those map tables during processing.
# Every migration must also have a destination plugin, which handles writing
# the migrated data in the appropriate form for that particular kind of data.
# Most Drupal content is an "entity" of one type or another, and we need to
# specify what entity type we are populating (in this case, taxonomy terms).
# Unlike the source plugin (which is specific to our particular scenario), this
# destination plugin is implemented in Drupal itself.
destination:
  plugin: entity:taxonomy_term

# We'll learn more about dependencies in beer_node - here, we leave them empty.
migration_dependencies: {}

# By default, configuration entities (like this migration) are not automatically
# removed when the migration which installed them is uninstalled. To have your
# migrations uninstalled with your migration module, add an enforced dependency
# on your module.
dependencies:
  enforced:
    module:
      - migrate_pubs
