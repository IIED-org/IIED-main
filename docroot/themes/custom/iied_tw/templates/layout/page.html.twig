{#
/**
 * @file
 * Default theme implementation to display a single page.
 *
 * The doctype, html, head and body tags are not in this template. Instead they
 * can be found in the html.html.twig template in this directory.
 *
 * Available variables:
 *
 * General utility variables:
 * - base_path: The base URL path of the Drupal installation. Will usually be
 *   "/" unless you have installed Drupal in a sub-directory.
 * - is_front: A flag indicating if the current page is the front page.
 * - logged_in: A flag indicating if the user is registered and signed in.
 * - is_admin: A flag indicating if the user has permission to access
 *   administration pages.
 *
 * Site identity:
 * - front_page: The URL of the front page. Use this instead of base_path when
 *   linking to the front page. This includes the language domain or prefix.
 *
 * Page content (in order of occurrence in the default page.html.twig):
 * - messages: Status and error messages. Should be displayed prominently.
 * - node: Fully loaded node, if there is an automatically-loaded node
 *   associated with the page and the node ID is the second argument in the
 *   page's path (e.g. node/12345 and node/12345/revisions, but not
 *   comment/reply/12345).
 *
 * Regions:
 * - page.header: Items for the header region.
 * - page.primary_menu: Items for the primary menu region.
 * - page.secondary_menu: Items for the secondary menu region.
 * - page.highlighted: Items for the highlighted content region.
 * - page.help: Dynamic help text, mostly for admin pages.
 * - page.content: The main content of the current page.
 * - page.sidebar_first: Items for the first sidebar.
 * - page.sidebar_second: Items for the second sidebar.
 * - page.footer: Items for the footer region.
 * - page.breadcrumb: Items for the breadcrumb region.
 *
 * @see template_preprocess_page()
 * @see html.html.twig
 *
 * @ingroup themeable
 */
#}

{{ attach_library('iied_tw/alpine') }}
{{ attach_library('iied_tw/alpine-collapse') }}
{{ attach_library('iied_tw/scroll-nav') }}

  <header role="banner" x-data="{ showSearch: false }" x-cloak>
    <nav x-data="{ isOpen: false }" 
    @click.away="isOpen = false"
    @keydown.escape.window="isOpen = false"
    role="navigation"
    aria-label="Main navigation">

      <div>
      {{ page.navbar_branding }}
      </div>
  
      {# Secondary nav #}
      <div class="px-4">
      <div class="relative my-2"
        x-data="scrollMenu()"
        x-init="updateScrollState($refs.scrollContainer)"
        @scroll="updateScrollState($refs.scrollContainer)">
        {# <div class="relative my-2"
          x-data="{
            isAtStart: true,
            isAtEnd: false,
            scrollByPage(element, direction) {
                const containerWidth = element.offsetWidth;
                const maxScrollLeft = element.scrollWidth - containerWidth;
                const currentScroll = element.scrollLeft;                
                const targetScroll = direction === 'left' ? currentScroll - (containerWidth - 96) : currentScroll + (containerWidth - 96);
                this.smoothScroll(element, targetScroll, 1000); // Duration is 1000ms
            },
            smoothScroll(element, endX, duration) {
                let startX = element.scrollLeft,
                    change = endX - startX,
                    currentTime = 0,
                    increment = 20,
                    vm = this;
        
                const animateScroll = function() {
                    currentTime += increment;
                    const val = easeInOutQuad(currentTime / duration);
                    element.scrollLeft = startX + (change * val);
                    vm.updateScrollState(element);
        
                    if(currentTime < duration) {
                        setTimeout(animateScroll, increment);
                    }
                };
                animateScroll();
            },
            updateScrollState(element) {
                const threshold = 5; 
                this.isAtStart = element.scrollLeft <= threshold;
                const scrolledToEnd = element.scrollWidth - element.scrollLeft - element.clientWidth <= threshold;
                this.isAtEnd = scrolledToEnd;
            }
            }" x-init="updateScrollState($refs.scrollContainer)" @scroll="updateScrollState($refs.scrollContainer)"> #}
           {{ page.secondary_menu }}

              <!-- Button to scroll left -->
              <div x-show="!isAtStart" class="absolute top-0 left-0 justify-start hidden w-20 h-full pointer-events-none sm:flex bg-gradient-to-r from-white via-white to-transparent">
                  <div class="pointer-events-auto">
                    <button 
                    @click="scrollByPage($refs.scrollContainer, 'left')" 
                    x-show="!isAtStart" 
                    x-transition:opacity 
                    :aria-hidden="isAtStart.toString()" 
                    class="relative flex items-center justify-center w-10 h-10 transition-colors ease-out bg-transparent rounded-full cursor-pointer hover:bg-gray-100 focus:outline-none"
                    aria-label="Scroll left"
                    >
                          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                              <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
                          </svg>
                      </button>
                  </div>
              </div>

              <!-- Button to scroll right -->
              <div x-show="!isAtEnd" class="absolute top-0 right-0 justify-end hidden w-20 h-full pointer-events-none sm:flex bg-gradient-to-l from-white via-white to-transparent">
                  <div class="pointer-events-auto">
                    <button 
                    @click="scrollByPage($refs.scrollContainer, 'right')" 
                    x-show="!isAtEnd"
                    x-transition:opacity
                    :aria-hidden="isAtEnd.toString()" 
                    class="relative flex items-center justify-center w-10 h-10 transition-colors ease-out bg-transparent rounded-full cursor-pointer hover:bg-gray-100 focus:outline-none"
                    aria-label="Scroll right"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                              <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                          </svg>
                      </button>
                  </div>
              </div>

        </div>
      </div>

      {% include '@iied_tw/partials/_search_expand.html.twig' %}
      {% include '@iied_tw/partials/_off-canvas-menu.html.twig' %}
    </nav>
  </header>





  {{ page.breadcrumb }}

  {{ page.highlighted }}

  {{ page.help }}

  {{ page.preface }}

<div>  {# move class="container p-4 mx-auto" #}
  <main role="main">
    <a id="main-content" tabindex="-1"></a>{# link is in html.html.twig #}

        {{ page.content }}

  </main>
</div>{# /.layout-container #}

 {# {% if page.postscript %}
    <section>
      <div class="container p-4">
        {{ page.postscript }}
      </div>
    </section>
  {% endif %}
        #}

  {% if page.footer %}
    <footer role="contentinfo">
      {{ page.footer }}
    </footer>
  {% endif %}