{#
/**
 * @file
 * Default theme implementation to display an accordion paragraph with
 * Alpine JS and Tailwind.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 * - accordion_titles: array of accordion titles
 * - accordion_bodies: array of accordion bodies
 *
 * @see template_preprocess_paragraph()
 * @see iied_tw_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'my-6',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    'space-y-0',
    'bg-white border border-gray-300 rounded-xl overflow-hidden',
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% block paragraph %}

  <div{{ attributes.addClass(classes) }} x-data="{ activeAccordion: 0 }">

    {% block content %}

      {% for key, accordion_title in accordion_titles %}
      <div class="py-2 border-b border-gray-300">

        <div class="text-xl font-headline">
          <button
            @click="activeAccordion = activeAccordion === {{key}} ? false : {{key}}"
            class="flex items-center justify-between w-full px-4"
          >
            <span>{{ accordion_title|raw }}</span>
            <span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="flex-shrink-0 w-6 h-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                stroke-width="2"
                :class="{ '-rotate-180': activeAccordion === {{key}} }"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M19 9l-7 7-7-7"
                />

              </svg>
            </span>
          </button>
        </div>

        <div x-show="activeAccordion === {{key}}" x-collapse class="px-4 my-4 prose">
          {{ accordion_bodies[key]|raw }}
        </div>

      </div>
      {% endfor %}

    {% endblock %}
  </div>

{% endblock paragraph %}
