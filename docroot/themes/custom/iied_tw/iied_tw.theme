<?php

/**
 * @file
 * Functions to support theming in the Tailwind CSS theme.
 */

/**
 * Implements hook_preprocess_HOOK().
 */
function iied_tw_preprocess_block(&$variables)
{
  if (iied_tw_get_active_theme() == 'iied_tw' && $variables['base_plugin_id'] == 'system_branding_block') {
    $variables['site_logo'] = '';
    if ($variables['content']['site_logo']['#access'] && $variables['content']['site_logo']['#uri']) {
      $variables['site_logo'] = str_replace('.svg', '.png', $variables['content']['site_logo']['#uri']);
    }
  }
}


/**
 * Get the active theme.
 *
 * @return string
 *   The name of the active theme.
 */
function iied_tw_get_active_theme()
{
  return \Drupal::service('theme.manager')->getActiveTheme()->getName();
}

/**
 * Implements hook_theme_suggestions_alter().
 */
// function iied_tw_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
//   if ($hook == 'taxonomy_term') {
//     $term = $variables["elements"]["#taxonomy_term"];
//     $vid = $term->get('vid')->target_id;
//     $view_mode = $variables["elements"]["#view_mode"];

//     $suggestions[] = $hook . '__' . $view_mode;
//     $suggestions[] = $hook . '__' . $vid . '__' . $view_mode;
//   }
// }
/**
 * Implements hook_theme_suggestions_HOOK().
 */
function iied_tw_theme_suggestions_alter(array &$suggestions, array $variables, $hook)
{
  if ($hook == 'image') {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      $image_style = $variables['style_name'];
      $suggestions[] = "image__" . $node->bundle();
      $suggestions[] = "image__" . $node->bundle() . '__' . $image_style;;
    }
  }
  if (isset($variables['element']['#gin_lb_form'])) {
    return;
  }
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function iied_tw_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables)
{
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_theme_suggestions_container_alter().
 */
function iied_tw_theme_suggestions_container_alter(&$suggestions, array $variables)
{
  $element = $variables['element'];

  if (isset($element['#type']) && $element['#type'] == 'view') {
    $suggestions[] = 'container__' . $element['#name'];
    $suggestions[] = 'container__' . $element['#name'] . '__' . $element['#display_id'];
  }

  if (isset($element['#type']) && $element['#type'] == 'container' && isset($element['children']['#type'])) {
    $suggestions[] = 'container__' . $element['children']['#type'];
  }
}

function iied_tw_preprocess_page(&$variables)
{
  $variables['#attached']['drupalSettings']['responsive_menu']['custom'] = [
    'options' => [
      'navbar' => [
        'add' => FALSE
      ],
    ],
    'config' => [],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function iied_tw_preprocess_paragraph(&$variables)
{

  $paragraph = $variables['paragraph'];
  $paragraph_bundle = $paragraph->bundle();

  // For tab_box paragraph we want to assemble some simpler arrays to iterate
  // over in the paragraph template.
  if ($paragraph_bundle == 'tab_box') {
    // Attach the theme alpine library, as we're on the tab_box paragraph.
    $variables['#attached']['library'][] =  'iied_tw/alpine';
    foreach ($variables['content']['field_tabs'] as $key => $tab) {
      if (is_numeric($key)) {
        $variables['tab_titles'][] = $tab['#paragraph']->field_tab_title->value;
        $variables['tab_bodies'][] = $tab['#paragraph']->field_tab_body->value;
      }
    }
  }
  if ($paragraph_bundle == 'accordion_box') {

    // Attach the theme alpine library, the accordion_box paragraph needs it!
    $variables['#attached']['library'][] =  'iied_tw/alpine-collapse';
    $variables['#attached']['library'][] =  'iied_tw/alpine';

    foreach ($variables['content']['field_accordion_section'] as $key => $tab) {
      if (is_numeric($key)) {
        $variables['accordion_titles'][$key] = $tab['#paragraph']->field_accordion_section_title->value;
        $variables['accordion_bodies'][$key] = $tab['#paragraph']->field_accordion_section_body->value;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function iied_tw_preprocess_links__language_block(&$variables)
{

  // Remove the link to the current language.
  $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if (isset($variables['links'][$current_language]['link'])) {
    unset($variables['links'][$current_language]['link']);
  }
}

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function iied_tw_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  // Add reset password link.
  $url_object = Url::fromRoute('user.pass');
  $form['password_reset_link'] = [
    '#type' => 'link',
    '#url' => $url_object,
    '#title' => t('Forgotten your username or password?'),
    '#attributes' => [
      'class' => ['user-reset-password-link'],
    ],
  ];
}

/**
 * Implements hook_preprocess_node() for Impact story nodes.
 */
function iied_tw_preprocess_node(&$variables)
{
  if ($variables['node']->bundle() == 'impact_story' && !$variables['node']->field_global_term->isEmpty()) {
    // Load the taxonomy term entity.
    $term = $variables['node']->field_global_term->entity;

    if ($term) {
      $parent_ids = $term->parent->getValue();
      // Since parent field can be multiple, we take the first one if it exists
      $parent_tid = !empty($parent_ids) ? reset($parent_ids)['target_id'] : NULL;

      if ($parent_tid && $parent_tid !== '0') {
        // Load the parent term.
        $parent_term = \Drupal\taxonomy\Entity\Term::load($parent_tid);

        if ($parent_term) {
          // Add the parent term name to the variable array.
          $variables['parent_term_name'] = $parent_term->label();
          // Add the parent term URL to the variable array.
          $variables['parent_term_url'] = \Drupal\Core\Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $parent_tid])->toString();
        }
      }
    }
  }
}

/**
 * Implements hook__theme_suggestions_block_alter().
 */

function iied_tw_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
  // Block suggestions for custom block types. 
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__type__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_preprocess_HOOK() for taxonomy-term templates.
 */
function iied_tw_preprocess_taxonomy_term(&$variables)
{
  // Get the taxonomy term entity.
  $term = $variables['elements']['#taxonomy_term'];

  // Check if the term belongs to the 'global' vocabulary.
  if ($term->bundle() == 'global' && $term->hasField('field_term_image') && !$term->get('field_term_image')->isEmpty()) {
    $image_file = $term->get('field_term_image')->entity;
    if ($image_file) {
      // Use the URL generator service to get the file URL.
      $uri = $image_file->getFileUri();

      // Use the Drupal service container to get the file_url_generator service.
      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);

      $variables['term_image_url'] = $url;
    }
  }
}
