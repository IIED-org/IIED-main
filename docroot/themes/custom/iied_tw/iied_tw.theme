<?php

/**
 * @file
 * Functions to support theming in the Tailwind CSS theme.
 */

/**
 * Implements hook_preprocess_HOOK().
 */
function iied_tw_preprocess_block(&$variables) {
  if (iied_tw_get_active_theme() == 'iied_tw' && $variables['base_plugin_id'] == 'system_branding_block') {
    $variables['site_logo'] = '';
    if ($variables['content']['site_logo']['#access'] && $variables['content']['site_logo']['#uri']) {
      $variables['site_logo'] = str_replace('.svg', '.png', $variables['content']['site_logo']['#uri']);
    }
  }
}


/**
 * Get the active theme.
 *
 * @return string
 *   The name of the active theme.
 */
function iied_tw_get_active_theme() {
  return \Drupal::service('theme.manager')->getActiveTheme()->getName();
}

/**
 * Implements hook_theme_suggestions_alter().
 */
// function iied_tw_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
//   if ($hook == 'taxonomy_term') {
//     $term = $variables["elements"]["#taxonomy_term"];
//     $vid = $term->get('vid')->target_id;
//     $view_mode = $variables["elements"]["#view_mode"];

//     $suggestions[] = $hook . '__' . $view_mode;
//     $suggestions[] = $hook . '__' . $vid . '__' . $view_mode;
//   }
// }
/**
 * Implements hook_theme_suggestions_HOOK().
 */
function iied_tw_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'image') {
    if ($node = \Drupal::routeMatch()->getParameter('node') ) {
      $image_style = $variables['style_name'];
      $suggestions[] = "image__" . $node->bundle();
      $suggestions[] = "image__" . $node->bundle() . '__' . $image_style;;
    }
  }
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function iied_tw_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

function iied_tw_preprocess_page(&$variables) {
  $variables['#attached']['drupalSettings']['responsive_menu']['custom'] = [
    'options' => [
      'navbar' => [
        'add' => FALSE
      ],
      'offCanvas' => [
        'position' => 'right-front'
      ]
    ],
    'config' => [
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function iied_tw_preprocess_paragraph(&$variables) {

  $paragraph = $variables['paragraph'];
  $paragraph_bundle = $paragraph->bundle();

  // For tab_box paragraph we want to assemble some simpler arrays to iterate
  // over in the paragraph template.
  if ($paragraph_bundle == 'tab_box' ) {
    // Attach the theme alpine library, as we're on the tab_box paragraph.
    $variables['#attached']['library'][] =  'iied_tw/alpine';
    foreach ($variables['content']['field_tabs'] as $key => $tab) {
      if (is_numeric($key)) {
        $variables['tab_titles'][] = $tab['#paragraph']->field_tab_title->value;
        $variables['tab_bodies'][] = $tab['#paragraph']->field_tab_body->value;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function iied_tw_preprocess_taxonomy_term(&$variables) {

 // $vocabulary = $variables->vid;

  //if ($vocabulary == 'collection' || $vocabulary == 'theme') {
    // Attach the theme alpine library, as we're on the right vocabulary.
    $variables['#attached']['library'][] =  'iied_tw/alpine';
    // foreach ($variables['content']['field_tabs'] as $key => $tab) {
    //   if (is_numeric($key)) {
    //     $variables['tab_titles'][] = $tab['#paragraph']->field_tab_title->value;
    //     $variables['tab_bodies'][] = $tab['#paragraph']->field_tab_body->value;
    //   }
    // }
 // }

}